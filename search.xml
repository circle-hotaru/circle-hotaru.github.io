<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Mongoose Aggregate 查询过去一周数据</title>
      <link href="Mongoose-Aggregate-%E6%9F%A5%E8%AF%A2%E8%BF%87%E5%8E%BB%E4%B8%80%E5%91%A8%E6%95%B0%E6%8D%AE/"/>
      <url>Mongoose-Aggregate-%E6%9F%A5%E8%AF%A2%E8%BF%87%E5%8E%BB%E4%B8%80%E5%91%A8%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>最近在使用 MongoDB 时遇到一个需求，就是查询过去一周内每天新增的用户数。我使用 Mongoose 来操作数据库，可以通过 aggregate 实现需求。</p><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>user 模型：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> UserSchema = mongoose.Schema(&#123;</span><br><span class="line">    username: &#123; <span class="attr">type</span>: <span class="built_in">String</span>, <span class="attr">trim</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">&#125;, &#123;</span><br><span class="line">    timestamps: &#123; <span class="attr">createdAt</span>: <span class="string">&#x27;createTime&#x27;</span>, <span class="attr">updatedAt</span>: <span class="string">&#x27;updateTime&#x27;</span> &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = mongoose.model(<span class="string">&#x27;User&#x27;</span>, UserSchema)</span><br></pre></td></tr></table></figure><p>日期格式：2021-04-11 02:18:51.418Z</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>首先获取今天的日期，然后筛选出过去一周的用户，最后通过 <code>createTime</code> 进行分组。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> today = <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line"><span class="keyword">const</span> day = today.setDate(today.getDate() - <span class="number">7</span>);</span><br><span class="line"><span class="keyword">const</span> createTime = &#123; <span class="attr">$gte</span>: <span class="keyword">new</span> <span class="built_in">Date</span>(day) &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> userGrowth = <span class="keyword">await</span> UserModel.aggregate([</span><br><span class="line">      &#123; <span class="attr">$match</span>: &#123; createTime &#125; &#125;,</span><br><span class="line">      &#123; <span class="attr">$project</span>: &#123; <span class="attr">everyDay</span>: &#123; <span class="attr">$substr</span>: [&#123; <span class="string">&quot;$add&quot;</span>: [<span class="string">&quot;$createTime&quot;</span>, <span class="number">28800000</span>] &#125;, <span class="number">0</span>, <span class="number">10</span>] &#125; &#125; &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        $group: &#123;</span><br><span class="line">          _id: <span class="string">&quot;$everyDay&quot;</span>,</span><br><span class="line">          count: &#123; <span class="attr">$sum</span>: <span class="number">1</span> &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    ])</span><br></pre></td></tr></table></figure><p><code>$add</code> 操作是因为 MongoDB 存储的数据是按照世界时间存储的，加上8小时（毫秒）才是国内时间。</p><p><code>$match</code> 在匹配 <code>createTime</code> 时，记得使用 <code>new Date()</code> 格式化 <code>day</code>，不然 <code>day</code> 只是个字符串，无法匹配。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://mongoosejs.com/docs/api/aggregate.html">https://mongoosejs.com/docs/api/aggregate.html</a></li><li><a href="https://www.cnblogs.com/greenteaone/p/11655543.html">https://www.cnblogs.com/greenteaone/p/11655543.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MongoDB </tag>
            
            <tag> Mongoose </tag>
            
            <tag> Aggregate </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS笔记-什么是BFC</title>
      <link href="CSS%E7%AC%94%E8%AE%B0-%E4%BB%80%E4%B9%88%E6%98%AFBFC/"/>
      <url>CSS%E7%AC%94%E8%AE%B0-%E4%BB%80%E4%B9%88%E6%98%AFBFC/</url>
      
        <content type="html"><![CDATA[<p><strong>BFC（块级格式化上下文）</strong>是页面中的一块渲染区域，并且有一套渲染规则，它决定了其子元素将如何定位，以及和其他元素的关系和相互作用。</p><p>一个HTML元素要创建BFC，则满足下列的任意一个即可：</p><ul><li>float的值不是none;</li><li>position的值不是static或者relative;</li><li>display的值为inline-block、inline-flex、table-cell、table-caption或者flex;</li><li>overflow的值不是visible。</li></ul><p>用处：</p><ul><li>避免外边距折叠；</li><li>清除浮动（计算BFC高度时，浮动元素也参与计算）；</li><li>避免和浮动元素重叠。</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://zhuanlan.zhihu.com/p/25321647">10 分钟理解 BFC 原理 - 林东洲的文章 - 知乎</a></li><li><a href="https://www.cnblogs.com/libin-1/p/7098468.html">什么是BFC</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> BFC </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>今日不宜妄自菲薄</title>
      <link href="%E4%BB%8A%E6%97%A5%E4%B8%8D%E5%AE%9C%E5%A6%84%E8%87%AA%E8%8F%B2%E8%96%84/"/>
      <url>%E4%BB%8A%E6%97%A5%E4%B8%8D%E5%AE%9C%E5%A6%84%E8%87%AA%E8%8F%B2%E8%96%84/</url>
      
        <content type="html"><![CDATA[<p>今天下午去参加了某游戏公司的宣讲会。其实去之前挺犹豫要不要去的，因为没有自己想要的岗位，只能投个比较容易进的岗位。宣讲会刚开始没多久，一个跟我同一届的同乡在微信上问我有没有去，宣讲会怎么样。她是其他专业的，而且自从大一加了微信后就再也没聊过了，突然来问我还是有点惊讶。</p><p>没过多久她也来了，然后我在微信上继续跟她聊天。问她为什么突然想来这个宣讲会，她说可能没什么事做就过来看看。聊到游戏，我们两个都不怎么玩游戏，我打算投测试开发工程师，她打算投文案策划。</p><p>最后做笔试的时候，果然大部分题目都是跟游戏有关的，比如你玩过什么游戏，游戏时长和游戏水平怎样。一下子想不到多少，而且我平时玩的都是单机游戏，有一些还很小众，这家公司的业务偏端游和手游。</p><p>做完笔试后跟她吐槽这次笔试好像考文综，感觉无缘了，游戏玩得不多。然后她回我，“玩了半个小时也可以写呀，凑够5个就好😂”。我突然意识到，我一直太过于追求完美了，一直觉得自己太菜了。尤其是投了舞厂第二天就被挂，死在简历筛选阶段被深深打击了🙄。可是我也是曾拿到14K offer 的人，我也是很优秀的！</p><p>最后，今天跟她聊的内容比过去四年还多。估计往后也不会怎么聊了，今天纯属偶然。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自我认同 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NodeJS 踩坑记</title>
      <link href="NodeJS-%E8%B8%A9%E5%9D%91%E8%AE%B0/"/>
      <url>NodeJS-%E8%B8%A9%E5%9D%91%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<ol><li><p>Node 处理 HTTP 请求过程种，所有的请求头全是小写字母，而不管实际上它们是怎么进行传输的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">req.headers[<span class="string">&#x27;content-type&#x27;</span>] <span class="comment">// 有效</span></span><br><span class="line">req.headers[<span class="string">&#x27;Content-Type&#x27;</span>] <span class="comment">// 无效</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NodeJS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm login 超时怎么办？</title>
      <link href="npm-login-%E8%B6%85%E6%97%B6%E6%80%8E%E4%B9%88%E5%8A%9E%EF%BC%9F/"/>
      <url>npm-login-%E8%B6%85%E6%97%B6%E6%80%8E%E4%B9%88%E5%8A%9E%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在发布 npm 包的时候我们需要在本地项目进行 <code>npm login</code> 操作，但是很容易遇到超时的情况。</p><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>国内使用 npm 应该都会设置淘宝镜像，但是淘宝镜像只是提供下载，当我们要 <code>npm login</code>、<code>npm publish</code> 时需要切换会官方源，即：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry https:&#x2F;&#x2F;registry.npmjs.org</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nodejs </tag>
            
            <tag> npm </tag>
            
            <tag> proxy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node CLI 开发：解决&#39;syntax error near unexpected token `(&#39;错误</title>
      <link href="Node-CLI-%E5%BC%80%E5%8F%91%EF%BC%9A%E8%A7%A3%E5%86%B3-syntax-error-near-unexpected-token-%E9%94%99%E8%AF%AF/"/>
      <url>Node-CLI-%E5%BC%80%E5%8F%91%EF%BC%9A%E8%A7%A3%E5%86%B3-syntax-error-near-unexpected-token-%E9%94%99%E8%AF%AF/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在开发一个 Node CLI 工具 <a href="https://www.npmjs.com/package/bilibili-video-analysis">bilibili-video-analysis</a>，希望可以直接使用 <code>bili-video -u url-of-bilibili-video</code> 开启服务。但是执行结果却报错：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">syntax error near unexpected token &#96;(</span><br></pre></td></tr></table></figure><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>出错原因是因为我的开发环境是 Windows，但 CLI 工具的执行环境是 Unix。而这两者的回车换行符是不兼容的。</p><blockquote><p>Unix系统里，每行结尾只有”&lt;换行&gt;”，即”\n”；Windows系统里面，每行结尾是”&lt;回车&gt;&lt;换行&gt;”，即”\r\n”；Mac系统里，每行结尾是”&lt;回车&gt;”。一个直接后果是，Unix/Mac系统下的文件在Windows里打开的话，所有文字会变成一行；而Windows里的文件在Unix/Mac下打开的话，在每行的结尾可能会多出一个^M符号。</p><p>——《回车和换行》 阮一峰</p></blockquote><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>把文件中的回车换行符换成 Unix 下的换行符即可。</p><p>以 vscode 为例：</p><p>在 settings 中搜索 file:Eol，将默认的 auto 选项改为 \n，然后重新保存你的文件即可。</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nodejs </tag>
            
            <tag> Linux </tag>
            
            <tag> CLI </tag>
            
            <tag> Winodws </tag>
            
            <tag> Bug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《人生七年》观后感</title>
      <link href="%E3%80%8A%E4%BA%BA%E7%94%9F%E4%B8%83%E5%B9%B4%E3%80%8B%E8%A7%82%E5%90%8E%E6%84%9F/"/>
      <url>%E3%80%8A%E4%BA%BA%E7%94%9F%E4%B8%83%E5%B9%B4%E3%80%8B%E8%A7%82%E5%90%8E%E6%84%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="人的一生是很短暂的"><a href="#人的一生是很短暂的" class="headerlink" title="人的一生是很短暂的"></a>人的一生是很短暂的</h2><p><img src="https://www.sbs.com.au/movies/sites/sbs.com.au.film/files/styles/full/public/7048120579_ab38d17f31_o_wide-b8db0d755af98f35d9f94a26a3d639488f4688d9.jpg?itok=YTmAnwHt" alt="21岁合照"></p><p>花了一周时间从7岁系列开始看，短短几天就看完了他人的大半生。大部分人都没有跨越自己原来的阶级，但是大家过得还算不错。</p><p>先对14位参与者做个总结吧：</p><p>John：应该是本片中世俗意义上最成功的一位了吧。他对自己的人生规划一直很明确，并且有很认真地去达成（年幼丧父，所以他的生活并不是心想就能事成，还是要努力的）。他一直秉持着“能力越大，责任越大”的态度，后半生一直在致力于慈善事业，是个很优秀的贵族精英。</p><p>Tony：乐天派，主业是开出租车。看他小时候的表现还以为长大后会是小混混，但是并没有，而且很爱他的父母。虽然一直都是工薪阶级，但是敢想敢做，小日子还是挺滋润的。</p><p>Nicolas：14个小孩中唯一一个跨越阶级的人。农村小伙，靠着知识改变命运，读了牛津大学，移民到美国生活。小时候比较害羞，上了大学后整个人变得活跃，话也多了起来。</p><p>Andrew：完美诠释了什么叫“看起来很聪明、善良又好命”。生活安稳富裕，性格不骄不躁，家庭幸福美满。</p><p>Bruce：人称“小天使”。性格比较腼腆，为人很善良，家庭工作都很不错。</p><p>Neil：小时候很可爱，满脸笑容。长大后不知何故逃离都市，在乡村过着流浪汉般的生活。一直在思考生活、人生的意义？基督教的信仰给了他很大的帮助。到了老年的时候开始在地方担任议员，找到了自己想做的事情，工资也基本可以维持生活。</p><p>Paul：小时候父母离异，在孤儿院生活。后面跟随父亲去了澳大利亚生活。不太自信，幸运的是妻子跟他互补，给予了他许多帮助。虽然是工薪阶级，但是生活也很幸福美满。</p><p>Simon：独生子，跟 Paul 在同一间孤儿院待过，年轻的时候也是不太自信。跟第二任妻子相处不错，照顾过许多寄养儿童，为人还不错。</p><p>Jackie：比较真性情的人吧，遭遇了几次不幸，不过还是积极面对生活。</p><p>Lynn：平凡的一生，家庭生活幸福。</p><p>Sue：平民三姐妹中混得比较好的，家庭生活幸福，工作也不错，业余生活也很丰富。</p><p>Suzie：小时候是富家女，年轻的时候有过一段叛逆期，结婚后成了贤妻良母，家庭幸福美满。</p><p>Peter：一直待在原来的中产阶级，组了乐队，当着公务员，生活还是不错的。</p><p>Charles：21岁后就不再接受采访了，不做评论。</p><p>看完这系列纪录片最大的感受就是人生各自精彩。每个人都有自己的追求，大家都有自己的快乐。虽然阶级难以跨越，但是用尽全力去追求自己想做的事情就好啦。最怕蹉跎一生。</p>]]></content>
      
      
      <categories>
          
          <category> 观影 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人生七年 </tag>
            
            <tag> 7 up </tag>
            
            <tag> 纪录片 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web API：event.preventdefault() 有什么用？</title>
      <link href="Web-API-event-preventdefault-%E6%9C%89%E4%BB%80%E4%B9%88%E7%94%A8/"/>
      <url>Web-API-event-preventdefault-%E6%9C%89%E4%BB%80%E4%B9%88%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>今天阅读某个项目源码时候遇到了 <code>event.preventdefault()</code> 这行代码。之前有遇到过几次，也去 MDN 查看了它的<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Event/preventDefault">介绍</a>，但还是不太理解它的实际应用场景。直到今天看到这部分源码才恍然大悟。</p><blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Event"><code>Event</code></a> 接口的 <code>preventDefault()</code> 方法，告诉<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/User_agent">user agent</a>：如果此事件没有被显式处理，它默认的动作也不应该照常执行。此事件还是继续传播，除非碰到事件侦听器调用<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Event/stopPropagation"><code>stopPropagation()</code></a> 或<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Event/stopImmediatePropagation"><code>stopImmediatePropagation()</code></a>，才停止传播。</p><p>——MDN</p></blockquote><p> 从 MDN 的解释我们可以了解到 <code>event.preventdefault()</code> 的作用是停止事件的默认动作，然后呢？它的实际应用场景是什么？</p><p>一般情况下，我们会使用 <code>&lt;a&gt;</code> 标签时候跳转到新的网页。</p><p>HTML</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">&quot;clickMe&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://blog.mightyherox.me/&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>跳转到多度橙的博客<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>但有时候我们会利用 <code>&lt;a&gt;</code> 标签当作按钮，它本身就拥有链接的功能，但我们会为它添加类似 <code>onclick</code> 事件。只要在 <code>&lt;a&gt;</code> 标签触发的事件中加入 <code>event.preventdefault()</code> ，就不会执行它的默认动作，也就是不会再执行「链接到某个网址」动作。</p><p>HTML</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">&quot;clickMe&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://blog.mightyherox.me/&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>about Me<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>JavaScript</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&#x27;clickMe&#x27;</span>).onclick = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">            alert(<span class="string">&quot;Hey there 👋, I&#x27;m circlehotarux!&quot;</span>);</span><br><span class="line">            event.preventDefault();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述案例中，HTML 文件除了修改显示的文本外，其他的部分都没有修改。然后我们在 JavaScript 中加入了 <code>event.preventDefault()</code> 以及一个弹窗事件。再次点击 <code>&lt;a&gt;</code> 标签，这时就只有弹窗事件发生，而并没有发生跳转事件。因为 <code>event.preventDefault()</code> 把 <code>&lt;a&gt;</code> 标签默认的功能给取消了！</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ol><li><a href="https://ithelp.ithome.com.tw/articles/10198999">https://ithelp.ithome.com.tw/articles/10198999</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Web API </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字面量是什么？</title>
      <link href="%E5%AD%97%E9%9D%A2%E9%87%8F%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F/"/>
      <url>%E5%AD%97%E9%9D%A2%E9%87%8F%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<p>在阅读技术文档的时候偶尔会遇到<strong>字面量（Literals）</strong>，咋一看，好家伙，这是什么高大上的名词？于是赶紧去 google 一番，但是出来的结果都语焉不详。</p><p>比如 MDN 的<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Grammar_and_types#%E5%AD%97%E9%9D%A2%E9%87%8F_Literals">中文翻译</a>是：</p><blockquote><p>译注：字面量是由语法表达式定义的常量；或，通过由一定字词组成的语词表达式定义的常量） 在JavaScript中，你可以使用各种字面量。这些字面量是脚本中按字面意思给出的固定的值，而不是变量。（译注：字面量是常量，其值是固定的，而且在程序脚本运行中不可更改，比如<em>false</em>，3.1415，thisIsStringOfHelloworld **，invokedFunction: myFunction(“myArgument”)。</p></blockquote><p>好像说得有点不太接地气。让我们看看<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#Literals">英文原文</a>是如何表达的：</p><blockquote><p>Literals represent values in JavaScript. These are fixed values—not variables—that you literally provide in your script.</p></blockquote><p>这……咋原文这么简短，中文翻译绕来绕去的。让我来翻译翻译原文：</p><p>在 JavaScript 中字面量表示 值（values）。它们是你在脚本中字面上写出来的固定的值，而不是变量。</p><p>可能你看了翻译还是不太理解，没关系，我们结合程序继续讲解：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var a = 100</span><br><span class="line">var b = &quot;JavaScript&quot;</span><br><span class="line">var c = [5,6,7]</span><br><span class="line">var d = &#123;</span><br><span class="line">name: &quot;小明&quot;,</span><br><span class="line">age: 18</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面例子中等号的左边都是变量（a、b、c、d），而右边的都是<strong>字面量</strong>（100、JavaScript……），也就是说<strong>字面量</strong>是你在程序源码中直接写出来的值。意即字面上的值。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>多看英文原文。</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Literals </tag>
            
            <tag> 字面量 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络时代平凡又渺小的我们</title>
      <link href="%E7%BD%91%E7%BB%9C%E6%97%B6%E4%BB%A3%E5%B9%B3%E5%87%A1%E5%8F%88%E6%B8%BA%E5%B0%8F%E7%9A%84%E6%88%91%E4%BB%AC/"/>
      <url>%E7%BD%91%E7%BB%9C%E6%97%B6%E4%BB%A3%E5%B9%B3%E5%87%A1%E5%8F%88%E6%B8%BA%E5%B0%8F%E7%9A%84%E6%88%91%E4%BB%AC/</url>
      
        <content type="html"><![CDATA[<p>自从上了大学后，我的生活发生了许多变化，一个明显的变化是，我的内心很痛苦。</p><blockquote><p>同辈压力（peer pressure）是指同辈人互相比较中产生的心理压力，一个同辈人团体对个人施加影响，会促使个人改变其态度、价值观或行为使其遵守团体准则。</p></blockquote><p>高中时代虽然面临着高考的压力，但整体还是比较快乐的。值得骄傲的一件事是创建了自己的社团。那时候做事天不怕地不怕，随时随地都有新的想法。</p><p>但上了大学后，特别是开始玩社交平台后（你敢信我高考后的那个暑假才开始使用微信？），发现了许多优秀的人，相比之下我真的太菜了。看他们的动态多了之后，觉得成功好像是很容易的事情，如果我没做到的话，一定是因为我太菜了。可是我却忽略了他们成功的背后，除了付出传统意义上的努力，还有能够支持他们做成这件事的资金、人脉，以及更重要的是优渥的环境带来的思维方式与自信。</p><blockquote><p>二三本学生就算付出比名校学生多的努力也很难追上他们，因为名校本身就可以给他们很多资源，也奠定了他们的自信心来源。同时能考上名校的，大多原生家庭就已经很不错，家庭注重教育，有可以大胆尝试的资本，从小的眼界就跟常人不一样。</p></blockquote><p>于是最近我开始思考，我真的那么菜吗？</p><ul><li>我会玩github，在我们系玩github的人几乎不到90%；</li><li>我会玩摄影，每次发朋友圈都能得到点赞和羡慕，经常有人找我约拍；</li><li>我的英文阅读水平还可以；</li><li>我在高中创办了一个社团；</li><li>我的专业成绩在班里也算前茅；</li><li>我在即刻的粉丝数也不少；</li><li>我有阅读和写作的习惯；</li><li>我有爱我的家人；</li><li>……</li></ul><p>网络时代，大家可以轻轻松松地分享自己的生活。但是我们要知道，大部分分享生活的人都是玩得比较好的那些人。现实生活中的大多数人都是不怎么说话的观众。所以，不要否定你自己，你也很优秀！</p><p>标题灵感：</p><p><em>韩剧：“你在所有人眼中都闪闪发亮唯独看中了我”</em> </p><p><em>日剧：“在所有人眼中都平凡又渺小的我们，却在彼此的眼中闪闪发亮”</em></p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 社交 </tag>
            
            <tag> 随想 </tag>
            
            <tag> 同辈压力 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何下载英文文献</title>
      <link href="%E5%A6%82%E4%BD%95%E4%B8%8B%E8%BD%BD%E8%8B%B1%E6%96%87%E6%96%87%E7%8C%AE/"/>
      <url>%E5%A6%82%E4%BD%95%E4%B8%8B%E8%BD%BD%E8%8B%B1%E6%96%87%E6%96%87%E7%8C%AE/</url>
      
        <content type="html"><![CDATA[<p>昨晚一位英文系的朋友找我帮忙下载某篇英文文献，因为他使用百度找不到，想让我通过谷歌找找。那篇英文文献确实难找，我只在JSTOR这个网站上找到（也可能是我搜索的姿势不对，毕竟我也不懂如何搜索英文文献）。虽然找到了，但是下载的话需要登陆注册才行，前提是你的学校已购买JSTOR。em……看来是没有希望了。</p><blockquote><p>JSTOR是一个收集学术期刊的在线系统。它提供了对发表在数百本知名学术期刊上的文章的电子版全文搜索。</p><p>——维基百科</p></blockquote><h2 id="Sci-hub"><a href="#Sci-hub" class="headerlink" title="Sci-hub"></a>Sci-hub</h2><p>不过爱折腾的我怎么会就此放弃呢？于是继续搜索，找到了 <a href="https://sci-hub.se/"><strong>Sci-hub</strong></a> 这个大杀器。</p><blockquote><p>Sci-Hub是目前已知第一个提供大量自动且免费的付费学术论文的网站，用户不需要事前订阅或付款，就能够使用原本存放在付费数据库的论文文章，并提供搜索原先出版社网站内的文档文件服务。其中这些文件都是透过世界各地匿名学者提供的使用账号，透过这些账号使得网站能够获取<a href="https://zh.wikipedia.org/wiki/JSTOR">JSTOR</a>、<a href="https://zh.wikipedia.org/wiki/%E6%96%BD%E6%99%AE%E6%9E%97%E6%A0%BC%E7%A7%91%E5%AD%A6%2B%E5%95%86%E4%B8%9A%E5%AA%92%E4%BD%93">施普林格科学+商业媒体</a>、<a href="https://zh.wikipedia.org/wiki/%E8%B3%BD%E5%90%89%E5%87%BA%E7%89%88%E5%85%AC%E5%8F%B8">赛吉出版公司</a>、<a href="https://zh.wikipedia.org/wiki/%E6%84%9B%E6%80%9D%E5%94%AF%E7%88%BE">爱思唯尔</a>等出版社所拥有的论文，并将之加以集结。当用户向Sci-Hub提交论文请求时，网站会先搜索创世纪图书馆是否有可提供的文件；如果创世纪图书馆并没有事先存储，Sci-Hub会以特定数据库的账号下载文章，并送至创世纪图书馆备份以供将来使用。</p><p>——维基百科</p></blockquote><p>Sci-hub的使用方法非常简单，打开 <a href="https://sci-hub.se/"><strong>Sci-hub</strong></a> 网站，输入文献链接、PMID号或者DOI号，即可立马获取到文献PDF全文。没错，就是这么简单~</p><p><img src="https://i.loli.net/2020/12/10/tMCXK8LP4ekA7wI.jpg" alt="2020-12-09_sci-hub官网.jpg"></p><h2 id="Sci-hub网址"><a href="#Sci-hub网址" class="headerlink" title="Sci-hub网址"></a>Sci-hub网址</h2><p>由于某些原因，Sci-hub的官网可能无法访问，这里提供几个可以访问的网站：</p><ul><li><a href="https://sci-hub.se/">https://sci-hub.se</a></li><li><a href="https://sci-hub.st/">https://sci-hub.st</a></li><li><a href="https://sci-hub.tf/">https://sci-hub.tf</a></li></ul><h2 id="Sci-hub的趣闻"><a href="#Sci-hub的趣闻" class="headerlink" title="Sci-hub的趣闻"></a>Sci-hub的趣闻</h2><p>Sci-hub的创立也很有趣，其创始人埃尔巴金因在哈佛大学从事研究期间无法支付所需的数百篇论文的开销，不得不使用他人分享的侵权论文（唉~说多了都是泪😂）。而这次经历也让她认为只有让更多人浏览付费墙机制的文献内容才能够提升知识的传播。</p><p><img src="https://i.loli.net/2020/12/10/KydrJ9UI8g7AYNw.jpg" alt="sci-hub创始人埃尔巴金.jpg"></p><p>另一个比较好玩的点是在SciHub下载论文时，会看到SciHub的创始人埃尔巴金女士向你挥手的动画，有点魔性……不过请放心，你的访问没有任何问题，是官方网站。</p><p><img src="https://i.loli.net/2020/12/10/aLbxHImFz6sMYqN.gif" alt="埃尔巴金在向你挥手.gif"></p>]]></content>
      
      
      <categories>
          
          <category> 其它 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sci-hub </tag>
            
            <tag> JSTOR </tag>
            
            <tag> 英文文献 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何修改pip源为国内源</title>
      <link href="%E5%A6%82%E4%BD%95%E4%BF%AE%E6%94%B9pip%E6%BA%90%E4%B8%BA%E5%9B%BD%E5%86%85%E6%BA%90/"/>
      <url>%E5%A6%82%E4%BD%95%E4%BF%AE%E6%94%B9pip%E6%BA%90%E4%B8%BA%E5%9B%BD%E5%86%85%E6%BA%90/</url>
      
        <content type="html"><![CDATA[<p>因为某些原因，在我国使用 pip 下载软件包的时候会异常缓慢甚至直接下载不了。为了解决这个问题，我们可以使用国内的镜像源达到高速下载。</p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li>系统: Windows 10</li><li>pip: 20.2.1</li></ul><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>这里以<a href="https://mirrors.tuna.tsinghua.edu.cn/help/pypi/">清华源</a>为例。按照清华源的介绍，需升级 pip 到最新的版本 (&gt;=10.0.0) 后进行配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install pip -U</span><br><span class="line">pip config set global.index-url https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple</span><br></pre></td></tr></table></figure><p>但是在实际下载过程中发现会报 <code>_ssl.c:1107: The handshake operation timed out</code> 错误，这个时候我们需要找到并修改pip.ini文件。</p><p>打开pip.ini文件，我们会发现如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[global]</span><br><span class="line">index-url &#x3D; https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple</span><br></pre></td></tr></table></figure><p>这是前面设置了清华源的缘故。我们需要在它下方添加新的内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[install]</span><br><span class="line">trusted-host &#x3D; pypi.tuna.tsinghua.edu.cn</span><br></pre></td></tr></table></figure><p>因为我们用的是https通信，这里设置让pip信任清华源。</p><p>完整内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[global]</span><br><span class="line">index-url &#x3D; https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple</span><br><span class="line"></span><br><span class="line">[install]</span><br><span class="line">trusted-host &#x3D; pypi.tuna.tsinghua.edu.cn</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>按照上面的步骤你已经正确设置pip源为清华源了，好好享受飞一样的速度吧。</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pip </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用code-server打造你的云端VS Code</title>
      <link href="%E4%BD%BF%E7%94%A8code-server%E6%89%93%E9%80%A0%E4%BD%A0%E7%9A%84%E4%BA%91%E7%AB%AFVS-Code/"/>
      <url>%E4%BD%BF%E7%94%A8code-server%E6%89%93%E9%80%A0%E4%BD%A0%E7%9A%84%E4%BA%91%E7%AB%AFVS-Code/</url>
      
        <content type="html"><![CDATA[<p>最近外出学习老是要背着个电脑还挺累的，但是我又需要电脑进行编程。有没有什么方法可以让我只需携带iPad外出同时又能进行编程呢？</p><p>答案是开源项目<a href="https://github.com/cdr/code-server">code-server</a>，通过它可以在浏览器上运行VS Code。下面我将介绍如何使用code-server打造你的云端VS Code。</p><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p>通过code-server在你的服务器上运行VS Code，然后通过浏览器访问VS Code。</p><h2 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h2><p>首先你需要准备一台服务器，官方文档推荐的最低配置是</p><ul><li>1 GB of RAM</li><li>2 cores（1核能跑，但有时候会卡住）</li></ul><p>如果你还没有服务器，国内推荐购买腾讯云（良心云）服务器；国外推荐购买Vultr，按量计费，线路不错，支持微信/支付宝。如果你想支持我，可以使用我的<a href="https://www.vultr.com/?ref=8451050-6G">AFF链接</a>，你将会获得100美元的使用额度，我也会得到25美元的使用额度。</p><p>操作系统可以使用任何你喜欢的Linux发行版，本文以Ubuntu 20.04为例。</p><h2 id="安装code-server"><a href="#安装code-server" class="headerlink" title="安装code-server"></a>安装code-server</h2><p>我们将通过官方提供的脚本安装code-server。使用XShell或Putty等登陆你的服务器，然后依次运行如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://code-server.dev/install.sh | sh -s -- --dry-run</span><br><span class="line">curl -fsSL https://code-server.dev/install.sh | sh</span><br></pre></td></tr></table></figure><p>运行完毕后，安装脚本将会打印出如何运行和使用code-server。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start code-server@$USER // 启动code-server</span><br></pre></td></tr></table></figure><h2 id="访问code-server"><a href="#访问code-server" class="headerlink" title="访问code-server"></a>访问code-server</h2><p>code-server默认使用密码登录（密码保存在<code>~/.config/code-server/config.yaml</code>），并且监听losthost从而避免向外界暴露自己。但我们的目标是在不同的机器上访问它。</p><p>下面我将介绍一种安全的且简单的访问code-server的方法。</p><p>在更进一步之前，你需要确保服务器开启HTTP/HTTPS端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ufw allow 80</span><br><span class="line">ufw allow 443</span><br></pre></td></tr></table></figure><ol><li><p>一个你自己的域名（你都已经看到这里了相信你也是有域名的人。如果还没有，你可以考虑购买一个，我使用的是NameCheap，Github学生包里有一年的免费NameCheap域名）。</p></li><li><p>使用A记录解析你的域名到服务器IP。</p></li><li><p>安装<a href="https://caddyserver.com/docs/download#debian-ubuntu-raspbian">Caddy</a>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;deb [trusted=yes] https://apt.fury.io/caddy/ /&quot; \</span><br><span class="line">    | sudo tee -a /etc/apt/sources.list.d/caddy-fury.list</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install caddy</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>Caddy服务器是一个开源的，使用 Golang 编写，支持 HTTP/2 的 Web 服务端。它使用Golang 标准库提供HTTP 功能。 Caddy 一个显著的特性是默认启用HTTPS。它是第一个无需额外配置即可提供HTTPS 特性的Web 服务器。</p><p>——维基百科</p></blockquote><blockquote><p>注意：上述方法安装的是Caddy 2，而目前中文互联网搜索出来的Caddy文档大部分是1版本，2和1有不少区别，请读者自行查阅官方英文文档。</p></blockquote><ol start="4"><li><p><code>nano /etc/caddy/Caddyfile</code>，将里的内容替换下面内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yourdomain.com</span><br><span class="line">reverse_proxy 127.0.0.1:8080</span><br></pre></td></tr></table></figure></li><li><p>重启caddy：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl reload caddy</span><br></pre></td></tr></table></figure></li></ol><p>接着在浏览器访问<code>https://&lt;your-domain-name&gt;</code>就可以进入你的code-server页面啦！</p><h2 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h2><p>只需修改<code>~/.config/code-server/config.yaml</code>里password的值，然后重启code-server即可：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart code-server@$USER</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/cdr/code-server/blob/v3.7.3/doc/guide.md">code-server Setup Guide</a></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 浏览器 </tag>
            
            <tag> code-server </tag>
            
            <tag> VS Code </tag>
            
            <tag> Ubuntu </tag>
            
            <tag> Caddy </tag>
            
            <tag> 云端 </tag>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>杀死那个MySQL-main process exited code=killed status=9/kill</title>
      <link href="%E6%9D%80%E6%AD%BB%E9%82%A3%E4%B8%AAMySQL-main-process-exited-code-killed-status-9-kill/"/>
      <url>%E6%9D%80%E6%AD%BB%E9%82%A3%E4%B8%AAMySQL-main-process-exited-code-killed-status-9-kill/</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>最近发现一个项目获取不到后端数据，于是登陆服务器查看一下情况，结果发现MySQL没有正常跑起来。</p><h2 id="问题定位"><a href="#问题定位" class="headerlink" title="问题定位"></a>问题定位</h2><p>运行<code>systemctl status mysql</code>发现失败原因是<code>main process exited code=killed status=9/kill</code>。Google一下发现是因为系统内存不足。这就很奇怪了，这台服务器配置虽然是1核1G，但是跑的项目并不多。</p><p>直接运行<code>top</code>命令发现有个Java项目在疯狂吃内存，推测原因是因为它<code>nohup</code>一直在后台运行导致内存不足。不过我对这方面还不是很了解，有朋友知道的话欢迎在下方评论区留言。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>知道问题出在哪里，下一步当然是去解决它啦。直接重启这个Java项目，然后发现MySQL也能正常跑起来。看来应该定时重启一下这个Java项目以免内存占用过大。</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://www.tangyuecan.com/2018/12/08/centos-7-4-mysql%E8%A2%AB%E6%9D%80%E7%9A%84%E9%97%AE%E9%A2%98/">CentOS 7.4 MySQL被杀的问题</a></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> MySQL </tag>
            
            <tag> Java </tag>
            
            <tag> 进程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何使用云函数绕过微信小程序网络通信的域名限制</title>
      <link href="%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E4%BA%91%E5%87%BD%E6%95%B0%E7%BB%95%E8%BF%87%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E7%9A%84%E5%9F%9F%E5%90%8D%E9%99%90%E5%88%B6/"/>
      <url>%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E4%BA%91%E5%87%BD%E6%95%B0%E7%BB%95%E8%BF%87%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E7%9A%84%E5%9F%9F%E5%90%8D%E9%99%90%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>在微信小程序开发过程中我们会遇到小程序<strong>只可以跟指定的域名进行网络通信</strong>。包括普通 HTTPS 请求（<a href="https://developers.weixin.qq.com/miniprogram/dev/api/network/request/wx.request.html">wx.request</a>）、上传文件（<a href="https://developers.weixin.qq.com/miniprogram/dev/api/network/upload/wx.uploadFile.html">wx.uploadFile</a>）、下载文件（<a href="https://developers.weixin.qq.com/miniprogram/dev/api/network/download/wx.downloadFile.html">wx.downloadFile</a>) 和 WebSocket 通信（<a href="https://developers.weixin.qq.com/miniprogram/dev/api/network/websocket/wx.connectSocket.html">wx.connectSocket</a>）。域名需要满足HTTPS和备案条件。如果是自家域名，你可以按照要求去做。但如果你要访问第三方API，而它恰好不满足上述条件时该怎么办？</p><h2 id="使用云函数中转"><a href="#使用云函数中转" class="headerlink" title="使用云函数中转"></a>使用云函数中转</h2><p>一个比较简单的方法是使用云函数中转。将有限制的小程序请求转为没有限制的云函数请求，达到间接访问未备案、无HTTPS API的效果。</p><blockquote><p>云函数（Serverless Cloud Function，SCF）是腾讯云为企业和开发者们提供的无服务器执行环境，帮助您在无需购买和管理服务器的情况下运行代码。您只需使用平台支持的语言编写核心代码并设置代码运行的条件，即可在腾讯云基础设施上弹性、安全地运行代码。SCF 是实时文件处理和数据处理等场景下理想的计算平台。</p></blockquote><h2 id="本例使用的API"><a href="#本例使用的API" class="headerlink" title="本例使用的API"></a>本例使用的API</h2><p>假设我们要访问的API是<a href="https://ghibliapi.herokuapp.com/">Studio Ghibli API</a>，会返回一些Ghibli电影或人物资料。</p><p>我们向该API地址<code>https://ghibliapi.herokuapp.com/films/2baf70d1-42bb-4437-b551-e5fed5a87abe</code>发送一个get请求，将获取到如下结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;2baf70d1-42bb-4437-b551-e5fed5a87abe&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Castle in the Sky&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;The orphan Sheeta inherited a mysterious crystal that links her to the mythical sky-kingdom of Laputa. With the help of resourceful Pazu and a rollicking band of sky pirates, she makes her way to the ruins of the once-great civilization. Sheeta and Pazu must outwit the evil Muska, who plans to use Laputa&#x27;s science to make himself ruler of the world.&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;director&quot;</span>: <span class="string">&quot;Hayao Miyazaki&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;producer&quot;</span>: <span class="string">&quot;Isao Takahata&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;release_date&quot;</span>: <span class="number">1986</span>,</span><br><span class="line">  <span class="attr">&quot;rt_score&quot;</span>: <span class="number">95</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建云函数"><a href="#创建云函数" class="headerlink" title="创建云函数"></a>创建云函数</h2><p>首先在小程序开发者工具中点击上方的云开发按钮，开通云开发功能。第一次打开会先让你新建一个环境，选择配额方案。对于个人开发者而言免费的基础版1应该够用了。</p><p><img src="https://i.loli.net/2020/11/21/HTvUMrYEWiQCzx2.png" alt="2020-11-21_开通云开发.png"></p><p><img src="https://i.loli.net/2020/11/21/xtQse6y78Jk9bvL.png" alt="2020-11-21_配额方案.png"></p><p>回到微信开发者工具，在云函数根目录右键<strong>新建Node.js云函数</strong>。</p><p><img src="https://i.loli.net/2020/11/21/4ewZUY38nKh6fQ9.png" alt="2020-11-21_新建NodeJS云函数.png"></p><p>新建好的云函数目录结构如下所示，我们在该目录打开终端，执行<code>npm i</code>安装<strong>wx-server-sdk</strong>，这是云函数开发必须安装的依赖。</p><p><img src="https://i.loli.net/2020/11/21/M2oLVF4JkvAasBw.png" alt="2020-11-21_新建好的云函数目录.png"></p><p>接着执行<code>npm i -S got</code>。</p><blockquote><p><a href="https://github.com/sindresorhus/got#readme">got</a>是Node.js中一个轻量级且功能强大的HTTP请求库。</p></blockquote><h2 id="编写云函数代码"><a href="#编写云函数代码" class="headerlink" title="编写云函数代码"></a>编写云函数代码</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 云函数入口文件</span></span><br><span class="line"><span class="keyword">const</span> cloud = <span class="built_in">require</span>(<span class="string">&#x27;wx-server-sdk&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> got = <span class="built_in">require</span>(<span class="string">&#x27;got&#x27;</span>)</span><br><span class="line"></span><br><span class="line">cloud.init()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 云函数入口函数</span></span><br><span class="line"><span class="built_in">exports</span>.main = <span class="keyword">async</span> (event, context) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> response = <span class="keyword">await</span> got(<span class="string">&#x27;https://ghibliapi.herokuapp.com/films/2baf70d1-42bb-4437-b551-e5fed5a87abe&#x27;</span>, &#123; <span class="attr">responseType</span>: <span class="string">&#x27;json&#x27;</span> &#125;)</span><br><span class="line">  <span class="keyword">return</span> response.body</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写完成后在该云函数目录右键开启云函数本地调试。</p><p>这段代码中我们通过<a href="https://github.com/sindresorhus/got#readme">got</a>发送一个get请求到上述的API地址中，再将获取到的Response中的body返回给小程序客户端。</p><h2 id="小程序调用云函数"><a href="#小程序调用云函数" class="headerlink" title="小程序调用云函数"></a>小程序调用云函数</h2><p>在小程序中我们使用如下代码来调用云函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wx.cloud.callFunction(&#123; <span class="attr">name</span>:<span class="string">&quot;getGhibliFilm&quot;</span>&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;  </span><br><span class="line">      <span class="built_in">console</span>.log(res);</span><br><span class="line">    &#125;).catch(<span class="built_in">console</span>.error)</span><br></pre></td></tr></table></figure><p>运行小程序，如果你在控制台看到下方的返回，说明你的云函数调用成功了。稍后你可以关闭云函数本地调试，上传并部署该云函数。</p><p><img src="https://i.loli.net/2020/11/21/d5tc3HTr1WbXG9f.png" alt="2020-11-21_云函数返回结果.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>垃圾微信，生态搞得这么封闭又臃肿，不想再搞微信小程序了。</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://segmentfault.com/a/1190000021744516">小程序如何访问未备案的 API ｜ 云开发</a></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
            <tag> 云函数 </tag>
            
            <tag> 云开发 </tag>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github镜像站</title>
      <link href="github%E9%95%9C%E5%83%8F%E7%AB%99/"/>
      <url>github%E9%95%9C%E5%83%8F%E7%AB%99/</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>众所周知，在我国访问github会遭遇某些不可描述的魔法攻击。虽然我平时访问github都是通过代理途径，但是最近买了一台国内的VPS，<code>git clone</code>一直下载不动，又懒得折腾这台VPS，google一番发现github还有国内镜像站，下载速度还可以。</p><h2 id="github镜像站"><a href="#github镜像站" class="headerlink" title="github镜像站"></a>github镜像站</h2><p>地址：<a href="https://github.com.cnpmjs.org/">https://github.com.cnpmjs.org/</a></p><p>使用方法：<code>git clone</code>时把<code>https://github.com/</code>替换为<code>https://github.com.cnpmjs.org/</code>即可。如：</p><p>替换前：<br><code>git clone https://github.com/circle-hotaru/bilibili-comment2canvas.git</code><br>替换后：<br><code>git clone https://github.com.cnpmjs.org/circle-hotaru/bilibili-comment2canvas.git</code></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> 镜像 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的云端生活</title>
      <link href="%E6%88%91%E7%9A%84%E4%BA%91%E7%AB%AF%E7%94%9F%E6%B4%BB/"/>
      <url>%E6%88%91%E7%9A%84%E4%BA%91%E7%AB%AF%E7%94%9F%E6%B4%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>最近在慢慢把自己接入云端生活，即能在云平台完成的事情尽量在云平台完成。这样做的原因主要是为了更好的提高生活/办公效率，能够在不同平台间进行快速切换。</p><h2 id="我的设备"><a href="#我的设备" class="headerlink" title="我的设备"></a>我的设备</h2><ol><li>惠普暗影精灵5</li><li>Redmi Note 7 Pro</li><li>iPad 2018</li><li>DigitalOcean Ubuntu 20.04</li></ol><h2 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h2><p>我现在使用的云端笔记是<a href="www.wolai.com">我来wolai</a>。或许现在大家听到最多的云端笔记是<a href="www.notion.so">Notion</a>，我之前也有尝试过它。前一段时间Notion在国内被墙了，虽然很快就恢复了，但是对国内用户而言这终究是个隐患。尽管我拥有科学上网的能力，但我想尽可能地不被无关因素打扰，于是我开始寻找国内的云端笔记产品。</p><p>恰巧在即刻看到有人在推荐<a href="www.wolai.com">我来wolai</a>，于是我也去体验了一番。</p><p>不过我使用<a href="www.wolai.com">我来wolai</a>的时间并不长，等深入了解后再回来继续介绍<a href="www.wolai.com">我来wolai</a>。</p><p>感兴趣的朋友可以使用我的注册邀请码：RD4ZQVM。</p><h2 id="资料备份-amp-共享"><a href="#资料备份-amp-共享" class="headerlink" title="资料备份&amp;共享"></a>资料备份&amp;共享</h2><p>资料备份是一间很重要的事情，因为你不知道什么时候你的生产力工具突然坏了，然后丢失里面的资料。我现在的备份途径是采用移动硬盘和<a href="onedrive.live.com">OneDrive</a>备份。</p><p>硬盘备份的资料主要是一些大文件，比如我拍摄的照片原图，它们都是RAW格式，一张照片就20~30MB。然后我每次拍摄都会拍250-400张照片，在电脑上修完图后，继续存在电脑里也是浪费空间，因为我很少返修以前的图。当然也不能直接删掉啦，所以放在移动硬盘里是最好的选择。</p><p>编程项目方面，自然是使用Github来备份，可以记录项目的进度，也方便向别人展示自己的编程水平。</p><p><del><a href="onedrive.live.com">OneDrive</a>备份的主要是一些需要在不同平台使用的资料，顺带实现资料共享。比如我保存的一些拍摄参考图。每次在ins或其他地方看到好看的地方我都会习惯把它们保存起来（不适用Pinterest是因为网络的问题）。但是每次都要从电脑传到手机真的很不方便。于是最近开始折腾OneDrive。其实之前也有使用<a href="drive.google.com">Google Drive</a>和<a href="weiyun.com">腾讯微云</a>来备份资料。相比Google Drive，OneDrive的网络状况会更加稳定，而腾讯微云则是充钱才能变得更强😂。</del></p><p>果然，onedrive的网络并不是很稳定。最近发现<a href="https://syncthing.net/">Syncthing</a>这款开源免费跨平台的文件同步工具，基于<strong>P2P技术</strong>实现设备间的文件同步。具体介绍可以看看下面这篇知乎文章：</p><p><a href="https://zhuanlan.zhihu.com/p/69267020">Syncthing - P2P文件同步工具 - 寒三石的文章 - 知乎</a></p><p>需要注意的是，Android添加Windows的共享文件夹时候需要在网页管理页面接收保存共享文件夹。不然就会像我一样傻傻等半天都没同步。</p><p><img src="https://i.loli.net/2020/11/24/hpVD9L4zBuilsFJ.png" alt="syncthing_android网页管理.png"></p><hr><p>持续更新中……</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 效率 </tag>
            
            <tag> 云平台 </tag>
            
            <tag> OneDrive </tag>
            
            <tag> 跨平台协作 </tag>
            
            <tag> Windows 10 </tag>
            
            <tag> 备份 </tag>
            
            <tag> 共享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to use simple global store and axios in Vue project</title>
      <link href="How-to-use-simple-global-store-and-axios-in-Vue-project/"/>
      <url>How-to-use-simple-global-store-and-axios-in-Vue-project/</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>最近写的项目涉及组件间的通信，其中有一些资料是大部分组件都通用的，因此把它们抽取出来当成全局变量是最好的。在Vue项目中，<code>state</code>基本上意味着<code>data</code>，状态管理（State management)通常指应用层数据的管理。官方建议我们在小型应用中采用一个简单的<a href="https://cn.vuejs.org/v2/guide/state-management.html">store模式</a>即可。不幸的是，官方文档中的介绍过于简洁，而网上找到相关中文资料也很少，甚至出现用store模式实现Vuex，天啦噜，这不就是把简单的问题复杂化了嘛。于是本文将要带领您如何使用简单的store模式。</p><h2 id="创建Vue项目"><a href="#创建Vue项目" class="headerlink" title="创建Vue项目"></a>创建Vue项目</h2><p>首先使用Vue Cli创建一个Vue项目</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create number-app</span><br></pre></td></tr></table></figure><p>接下来会让你选择dafault或者manual，我们选择default即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Vue CLI v4.4.6</span><br><span class="line">? Please pick a preset: (Use arrow keys)</span><br><span class="line">❯ default (babel, eslint)</span><br><span class="line">  Manually select features</span><br></pre></td></tr></table></figure><p>一旦项目创建完成，您需要进入项目中，然后运行该项目。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd number-app</span><br><span class="line">npm run serve</span><br></pre></td></tr></table></figure><p>使用浏览器打开<code>http://localhost:8080/</code>，当你看到下图时表明项目已经成功跑起来了。</p><p><img src="https://i.loli.net/2020/10/26/S8i29qknVm1djZb.png" alt="2020-10-26_number-app初始页面.png"></p><p>不过我们接下来并不需要<code>HelloWorld.vue</code>，您可以把它和<code>App.vue</code>里相关部分删去。</p><h2 id="store-js"><a href="#store-js" class="headerlink" title="store.js"></a>store.js</h2><p>在<code>src/</code>文件夹下创建一个<code>store.js</code>文件，它将暴露一个<code>store</code>对象。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">export const store &#x3D; &#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    numbers: [1, 2, 3]，</span><br><span class="line">    text: &#39;&#39;</span><br><span class="line">  &#125;，</span><br><span class="line">  addNumber(newNumber) &#123;</span><br><span class="line">    this.state.numbers.push(newNumber);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>上面的<code>numbers</code>和<code>text</code>是我们将要在多个组件中显示或操作的数据。需要注意，所有<code>store</code>中<code>state</code>的变更，都放置在<code>store</code>自身的<code>action</code>中去管理，<code>addNumber(newNumber)</code>便是一个范例。</p><h2 id="在组件中使用"><a href="#在组件中使用" class="headerlink" title="在组件中使用"></a>在组件中使用</h2><p>在组件中，我们需要<code>import &#123; store &#125; from &quot;../store.js&quot;;</code>来引入<code>store</code>。在<code>data</code>中使用<code>storeState: store.state</code>来获取<code>store</code>中的<code>state</code>。</p><p>现在我们创建一个<code>NumberDisplay</code>组件用来显示<code>store</code>中的数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123; storeState.numbers &#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; storeState.text &#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; store &#125; from &quot;..&#x2F;store.js&quot;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;NumberDisplay&quot;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      storeState: store.state</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>然后创建一个<code>NumberSubmit</code>组件用来添加新的数字到<code>store</code>中的<code>number</code>数组。使用<code>store.addNumber</code>来调用<code>store</code>中的<code>addNumber</code>，从而改变<code>store</code>中的<code>state</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;input v-model&#x3D;&quot;numberInput&quot; type&#x3D;&quot;number&quot; &#x2F;&gt;</span><br><span class="line">    &lt;button @click&#x3D;&quot;addNumber(numberInput)&quot;&gt;</span><br><span class="line">     Add new number</span><br><span class="line">    &lt;&#x2F;button&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; store &#125; from &quot;..&#x2F;store.js&quot;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;NumberSubmit&quot;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      numberInput: 0</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    addNumber(numberInput) &#123;</span><br><span class="line">      store.addNumber(Number(numberInput));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>现在您可以在页面上添加新的数字了。</p><p><img src="https://i.loli.net/2020/10/26/z1jyrgfSBdUEZHG.png" alt="2020-10-26_number-appv1.png"></p><p><img src="https://i.loli.net/2020/10/26/mY2T9h5bRHDcuN3.png" alt="2020-10-26_number-app_add_number.png"></p><h2 id="使用axios"><a href="#使用axios" class="headerlink" title="使用axios"></a>使用axios</h2><p>有很多时候你在构建应用时需要访问一个API并展示其数据。做这件事的方法有好几种，而使用基于promise的HTTP客户端axios则是其中非常流行的一种。本文我们将使用<a href="http://numbersapi.com/#42">Numbers API</a>，它将返回一些有趣的文本给我们。</p><p>在Vue项目中使用axios，首先</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save axios vue-axios</span><br></pre></td></tr></table></figure><p>然后在main.js中加上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &#39;vue&#39;</span><br><span class="line">import axios from &#39;axios&#39;</span><br><span class="line">import VueAxios from &#39;vue-axios&#39;</span><br><span class="line"></span><br><span class="line">Vue.use(VueAxios, axios)</span><br></pre></td></tr></table></figure><p>这样您就可以在Vue文件中通过下面的三种方式来使用axios：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Vue.axios.get(api).then((response) &#x3D;&gt; &#123;</span><br><span class="line">  console.log(response.data)</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line">this.axios.get(api).then((response) &#x3D;&gt; &#123;</span><br><span class="line">  console.log(response.data)</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line">this.$http.get(api).then((response) &#x3D;&gt; &#123;</span><br><span class="line">  console.log(response.data)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>但是当我在store.js文件中使用axios时却出现了错误<code>Cannot read property &#39;get&#39; of undefined</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">addNumber(newNumber) &#123;</span><br><span class="line">    this.state.numbers.push(newNumber);</span><br><span class="line">    this.axios.get(&#39;http:&#x2F;&#x2F;numbersapi.com&#x2F;&#39;+ newNumber)</span><br><span class="line">      .then(response &#x3D;&gt; &#123;</span><br><span class="line">          this.state.text &#x3D; response.data;</span><br><span class="line">          console.log(response);</span><br><span class="line">          &#125;)</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/10/26/aRJxhqF92ByVAk1.png" alt="2020-10-26_使用axios报错.png"></p><p>出错的原因是因为<code>store.js</code>文件中的<code>this.axios</code>并没有引用Vue实例，我们需要另外引入axios。完整<code>store.js</code>文件如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">const axios &#x3D; require(&#39;axios&#39;);</span><br><span class="line"></span><br><span class="line">export const store &#x3D; &#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    numbers: [1, 2, 3],</span><br><span class="line">    text: &#39;3 is the number of spatial dimensions we perceive our universe to have.&#39;</span><br><span class="line">  &#125;,</span><br><span class="line">  addNumber(newNumber) &#123;</span><br><span class="line">    this.state.numbers.push(newNumber);</span><br><span class="line">    axios.get(&#39;http:&#x2F;&#x2F;numbersapi.com&#x2F;&#39;+ newNumber)</span><br><span class="line">      .then(response &#x3D;&gt; &#123;</span><br><span class="line">          this.state.text &#x3D; response.data;</span><br><span class="line">          console.log(response);</span><br><span class="line">          &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/10/26/3I1JpGOx5Z4Vfba.png" alt="2020-10-26_number-app最终效果.png"></p><p>至此，我们完成了number-app。如果您的程序无法正常运行，请到github上查看<a href="https://github.com/circle-hotaru/number-app">源码</a>。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过本文，我们学会了如何在Vue项目中使用简单的状态管理store，当您的项目足够简单时推荐您使用它而不是Vuex。同时我们也接触了axios，这是一个强大的工具。</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> font-end </tag>
            
            <tag> simple global store </tag>
            
            <tag> axios </tag>
            
            <tag> store pattern </tag>
            
            <tag> store.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何使用CORS代理解决“No Access-Control-Allow-Origin header”问题</title>
      <link href="How-to-use-a-CORS-proxy-to-get-around-%E2%80%9CNo-Access-Control-Allow-Origin-header%E2%80%9D-problems/"/>
      <url>How-to-use-a-CORS-proxy-to-get-around-%E2%80%9CNo-Access-Control-Allow-Origin-header%E2%80%9D-problems/</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>最近在编写项目过程中又遇到了跨域问题，之前在编写<a href="http://tool.mightyherox.me/">Bilibili评论转图片神器</a>项目过程中也有遇到过，解决办法是采用CORS。而CORS需要浏览器和服务器同时支持，浏览器方面会自动完成，所以关键在于服务器。因为我调用的是第三方API，如果它返回的<code>Access-Control-Allow-Origin</code>头信息不是<code>*</code>或没有添加我的项目地址的话，那我是无法直接获取资料的。所以当时我有写一个Node程序做中间件接口转发。当然，这个Node程序写得很简陋，功能有限，只能处理Bilibili API请求。然后我无意中发现了一个github项目<a href="https://github.com/Rob--W/cors-anywhere">cors-anywhere</a>，它的介绍是这样的：</p><blockquote><p>CORS Anywhere is a NodeJS reverse proxy which adds CORS headers to the proxied request.</p></blockquote><h2 id="CORS-Anywhere"><a href="#CORS-Anywhere" class="headerlink" title="CORS Anywhere"></a>CORS Anywhere</h2><p>翻译成中文即，<strong>CORS Anywhere是一个NodeJS反向代理，它将CORS标头添加到代理请求中。</strong>好像正合我意。看了一下用法也挺简单。<br>比如，平时我们发送API请求是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const url &#x3D; &quot;https:&#x2F;&#x2F;example.com&quot;; &#x2F;&#x2F; site that doesn’t send Access-Control-*</span><br><span class="line">fetch(url)</span><br><span class="line">.then(response &#x3D;&gt; response.text())</span><br><span class="line">.then(contents &#x3D;&gt; console.log(contents))</span><br><span class="line">.catch(() &#x3D;&gt; console.log(&quot;Can’t access &quot; + url + &quot; response. Blocked by browser?&quot;))</span><br></pre></td></tr></table></figure><p>运行结果当然是浏览器阻止该代码访问来自<a href="https://example.com/">https://example.com</a> 的响应。而浏览器这样做的原因是，该响应缺少Access-Control-Allow-Origin响应标头。</p><p>然后我们稍微修改一下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const proxyurl &#x3D; &quot;https:&#x2F;&#x2F;cors-anywhere.herokuapp.com&#x2F;&quot;;</span><br><span class="line">const url &#x3D; &quot;https:&#x2F;&#x2F;example.com&quot;; &#x2F;&#x2F; site that doesn’t send Access-Control-*</span><br><span class="line">fetch(proxyurl + url) &#x2F;&#x2F; https:&#x2F;&#x2F;cors-anywhere.herokuapp.com&#x2F;https:&#x2F;&#x2F;example.com</span><br><span class="line">.then(response &#x3D;&gt; response.text())</span><br><span class="line">.then(contents &#x3D;&gt; console.log(contents))</span><br><span class="line">.catch(() &#x3D;&gt; console.log(&quot;Can’t access &quot; + url + &quot; response. Blocked by browser?&quot;))</span><br></pre></td></tr></table></figure><blockquote><p><em>Note: <a href="https://cors-anywhere.herokuapp.com/">https://cors-anywhere.herokuapp.com/</a> 是CORS Anywhere项目的一个在线Demo</em></p></blockquote><p>上面这段代码可以成功访问响应，因为我们将请求URL前缀为代理URL，即其更改为<a href="https://cors-anywhere.herokuapp.com/https://example.com%EF%BC%8C">https://cors-anywhere.herokuapp.com/https://example.com，</a> 请求通过该代理取得，然后：</p><ol><li>将请求转发到<a href="https://example.com./">https://example.com。</a></li><li>从<a href="https://example.com/">https://example.com</a> 接收响应。</li><li>将头信息Access-Control-Allow-Origin添加到响应中。</li><li>将带有添加的头信息的响应传递回请求的前端代码。</li><li>浏览器允许前端代码访问响应。</li></ol><p>实测确实可以解决跨域问题，那么我们如何部署属于自己的CORS Anywhere呢？（当然您也可以继续使用<a href="https://cors-anywhere.herokuapp.com/%EF%BC%89">https://cors-anywhere.herokuapp.com/）</a></p><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>您还可以使用5个命令在2-3分钟内轻松地将您自己的代理部署到<a href="https://www.heroku.com/">Heroku</a>（Heroku是一个支持多种编程语言的云平台即服务）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;Rob--W&#x2F;cors-anywhere.git</span><br><span class="line">cd cors-anywhere&#x2F;</span><br><span class="line">npm install</span><br><span class="line">heroku create</span><br><span class="line">git push heroku master</span><br></pre></td></tr></table></figure><p>运行完这些命令后，您将最终运行一个属于自己的CORS Anywhere服务器，该服务器位于例如<a href="https://circlehotarux-cors-anywhere.herokuapp.com/%E3%80%82">https://circlehotarux-cors-anywhere.herokuapp.com/。</a> </p><h2 id="cors-proxy-server"><a href="#cors-proxy-server" class="headerlink" title="cors-proxy-server"></a>cors-proxy-server</h2><p>发现某些API使用cors-anywhere时会遇到403 Forbidden问题，具体如何解决留待以后更新。这里提供一个替代方案——<a href="https://github.com/messier31/cors-proxy-server">cors-proxy-server</a>，使用方法同cors-anywhere一样，官方提供了一个在线<a href="https://secret-ocean-49799.herokuapp.com/">Demo</a>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const proxyurl &#x3D; &quot;https:&#x2F;&#x2F;secret-ocean-49799.herokuapp.com&#x2F;&quot;;</span><br><span class="line">const url &#x3D; &quot;https:&#x2F;&#x2F;example.com&quot;; &#x2F;&#x2F; site that doesn’t send Access-Control-*</span><br><span class="line">fetch(proxyurl + url) &#x2F;&#x2F; https:&#x2F;&#x2F;secret-ocean-49799.herokuapp.com&#x2F;https:&#x2F;&#x2F;example.com</span><br><span class="line">.then(response &#x3D;&gt; response.text())</span><br><span class="line">.then(contents &#x3D;&gt; console.log(contents))</span><br><span class="line">.catch(() &#x3D;&gt; console.log(&quot;Can’t access &quot; + url + &quot; response. Blocked by browser?&quot;))</span><br></pre></td></tr></table></figure><h2 id="Heroku"><a href="#Heroku" class="headerlink" title="Heroku"></a>Heroku</h2><p>没有Heroku？没关系，接下来我将教您如何注册使用Heroku。</p><p>首先打开<a href="https://www.heroku.com/">Heroku官网</a>，点击右上角的Sign up</p><p><img src="https://i.loli.net/2020/10/21/5hwTcnJUz6PFgVY.png" alt="2020-10-21_Heroxku官网.png"></p><p>按要求填写好资料，注意填写邮箱填写国外的邮箱，如gmail，使用国内的邮箱可能会注册失败。点击<strong>CREATE FREE ACCOUNT</strong>后会发送一封验证邮件到您的邮箱，点击邮件中的链接后会跳转到设置密码页面。设置完密码后，就正式完成注册啦！</p><p><img src="https://i.loli.net/2020/10/21/RA8dIrFlWZN3hcL.png" alt="2020-10-21_Heroku-Sign-up.png"></p><p>接着我们来到<a href="https://devcenter.heroku.com/articles/heroku-cli">Heroku Dev Center</a>下载Heroku CLi，这是Heroku的命令行工具，为接下来做准备。选择并安装自己系统对应的安装程序即可。</p><p><img src="https://i.loli.net/2020/10/21/klVBD7bMGNTv9gY.png" alt="2020-10-21_Heroku-Cli.png"></p><p>安装完成后，在你喜欢的位置打开git bash，我们将在这里下载前面所提到的CORS Anywhere项目。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;Rob--W&#x2F;cors-anywhere.git</span><br><span class="line">cd cors-anywhere&#x2F;</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>然后我们还是在git bash中登陆我们的Heroku账号，输入<code>heroku login -i</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">heroku login -i</span><br><span class="line">heroku: Enter your login credentials</span><br><span class="line">Email: me@example.com</span><br><span class="line">Password: ***************</span><br><span class="line">Two-factor code: ********</span><br><span class="line">Logged in as me@heroku.com</span><br></pre></td></tr></table></figure><p>接着输入<code>heroku create $&#123;APP name&#125;</code>来创建您的第一个APP，注意，这里创建的APP名是唯一的，也就是如果有人已经使用了您想要的名字，您将无法创建该APP。当然您也可以输入<code>heroku create</code>来创建一个随机名字的APP。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">heroku create</span><br><span class="line">Creating app... done, ⬢ sleepy-meadow-81798</span><br><span class="line">https:&#x2F;&#x2F;sleepy-meadow-81798.herokuapp.com&#x2F; | https:&#x2F;&#x2F;git.heroku.com&#x2F;sleepy-meadow-81798.git</span><br></pre></td></tr></table></figure><p>最后输入<code>git push heroku master</code>将APP部署到Heroku上。打开上面提供的地址您将看到您所部署的项目，Awesome！</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这篇文章帮助您部署属于自己的CORS-Anywhere项目。同时，带领您对Heroku有初步的了解。现在您可以轻松的解决跨域问题啦~</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> font-end </tag>
            
            <tag> CORS </tag>
            
            <tag> Same-origin policy </tag>
            
            <tag> CORS Anywhere </tag>
            
            <tag> CORS PROXY SERVER </tag>
            
            <tag> Heroku </tag>
            
            <tag> 跨域资源分享 </tag>
            
            <tag> 同源策略 </tag>
            
            <tag> 浏览器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反思-做事不够彻底导致失败</title>
      <link href="%E5%8F%8D%E6%80%9D-%E5%81%9A%E4%BA%8B%E4%B8%8D%E5%A4%9F%E5%BD%BB%E5%BA%95%E5%AF%BC%E8%87%B4%E5%A4%B1%E8%B4%A5/"/>
      <url>%E5%8F%8D%E6%80%9D-%E5%81%9A%E4%BA%8B%E4%B8%8D%E5%A4%9F%E5%BD%BB%E5%BA%95%E5%AF%BC%E8%87%B4%E5%A4%B1%E8%B4%A5/</url>
      
        <content type="html"><![CDATA[<p>今早看了艾尔文的一个视频<a href="https://youtu.be/ZZ9zGgr2yY8">没钱没时间又没资源，如何翻身？这个“关键思维”很少人在谈</a>，讲述我们如何翻身。其中一个重要的点是要想从一个阶层进入到另一个阶层需要你投入现有的80%的资产（包括时间、金钱、行动）。是不是80%不重要，重要的是你确实需要投入绝大部分的资产才能成功。</p><p>回想到大学生活，我曾经有过许多机遇，但都被我一一错过了。比如说大学期间接触了摄影，并且也玩得挺不错。开始有越来越多的人来找我约拍。但很多都被我拒绝了。原因是当时觉得摄影只是个爱好，不想花费太多时间。另一方面，不敢投入太多金钱，导致设备也跟不上，只有一台索尼a6400和适马30 f1.4。拍简单的人像还可以，但是要接商业拍摄的话实在不够看。同时在后期修图方面，我一开始看的是本叔的视频，没有看完，学了一点皮毛就没继续学了。但事实上，我也很羡慕摄影师的生活。本来我的开局还挺好，结果因为我不舍得投入，从大二到大四，摄影水平也没见提升多少，也没有让摄影成为我的副业。</p><p>在编程方面也是如此，从Web前端到Java Web后端到Android到Java Web后端再到前端。每次都止步于入门门槛。学完入门后，觉得好难，又换另一个。如果一直坚持一个方向的话，我现在应该在某个技术栈方面达到进阶了吧。</p><p>真的感觉自己有过许多机会，但每次都浅尝即止，然后就错过了。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大学 </tag>
            
            <tag> 翻身 </tag>
            
            <tag> 机遇 </tag>
            
            <tag> 摄影 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Splashtop Wired XDisplay让iPad做win10扩展屏</title>
      <link href="%E4%BD%BF%E7%94%A8Splashtop-Wired-XDisplay%E8%AE%A9iPad%E5%81%9Awin10%E6%89%A9%E5%B1%95%E5%B1%8F/"/>
      <url>%E4%BD%BF%E7%94%A8Splashtop-Wired-XDisplay%E8%AE%A9iPad%E5%81%9Awin10%E6%89%A9%E5%B1%95%E5%B1%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>宿舍有一台闲置的iPad（第6代），买来主要是在图书馆看资料。不过目前我待在宿舍使用电脑的时间比较多，所以它就闲置了。宿舍电脑是15.6寸的笔记本，这个屏幕在笔记本中算大了。但是对我这种经常分屏一边看视频一边敲代码的人来说略显窄。于是看看能不能让iPad作为我的扩展屏。</p><p>网络介绍的方法有很多，其中Splashtop这款软体推荐得比较多，而且还免费。就把操作方法总结一下，留作存档。</p><h2 id="1-iPad端安装Splashtop-Wired-XDisplay-HD-显示器扩展与镜像"><a href="#1-iPad端安装Splashtop-Wired-XDisplay-HD-显示器扩展与镜像" class="headerlink" title="1. iPad端安装Splashtop Wired XDisplay HD-显示器扩展与镜像"></a>1. iPad端安装Splashtop Wired XDisplay HD-显示器扩展与镜像</h2><p>在App Store搜索安装即可。</p><h2 id="2-Win10端安装Splashtop-Wired-XDisplay"><a href="#2-Win10端安装Splashtop-Wired-XDisplay" class="headerlink" title="2. Win10端安装Splashtop Wired XDisplay"></a>2. Win10端安装Splashtop Wired XDisplay</h2><p>打开<a href="https://www.splashtop.com/cn/wiredxdisplay">官网地址</a></p><p><img src="https://i.loli.net/2020/09/23/UwQry7VZnX6giYx.png" alt="Splashtop官网下载页"></p><p>点击<strong>下载PC的XDISPLAY AGENT</strong></p><p>下载后进行安装即可，很简单。</p><p>打开软件可能会提示你缺少驱动，需要下载安装iTunes即可。</p><h2 id="3-用iPad数据线连接iPad和win10"><a href="#3-用iPad数据线连接iPad和win10" class="headerlink" title="3. 用iPad数据线连接iPad和win10"></a>3. 用iPad数据线连接iPad和win10</h2><p>两端都运行Splashtop软体，默认是复制屏幕，你可以在win10上按 win + p 选择扩展。另外取消勾选<strong>启用镜像模式</strong>，注意，是<strong>取消</strong>。</p><p><img src="https://i.loli.net/2020/09/23/uNWmxCjyhJ7qp81.png" alt="Splashtop电脑端配置"></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>按照上述步骤操作即可顺利实现iPad做win10的扩展屏。鼠标会有轻微的延迟，CPU占用在25%左右。不过我发现使用iPad的屏幕看视频里的代码还是太小了，要凑过去看才行。满足不了我的需求，所以折腾一下就不继续了……</p>]]></content>
      
      
      <categories>
          
          <category> 数码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iPad </tag>
            
            <tag> win10 </tag>
            
            <tag> 笔记本 </tag>
            
            <tag> Splashtop </tag>
            
            <tag> 扩展屏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我奋斗了18年才和你坐在一起喝咖啡</title>
      <link href="%E6%88%91%E5%A5%8B%E6%96%97%E4%BA%8618%E5%B9%B4%E6%89%8D%E5%92%8C%E4%BD%A0%E5%9D%90%E5%9C%A8%E4%B8%80%E8%B5%B7%E5%96%9D%E5%92%96%E5%95%A1/"/>
      <url>%E6%88%91%E5%A5%8B%E6%96%97%E4%BA%8618%E5%B9%B4%E6%89%8D%E5%92%8C%E4%BD%A0%E5%9D%90%E5%9C%A8%E4%B8%80%E8%B5%B7%E5%96%9D%E5%92%96%E5%95%A1/</url>
      
        <content type="html"><![CDATA[<p>今天在图书馆自习时，旁边来了一个女生想要使用图书馆的电脑。可是折腾了几次都没开机，然后问我怎么开机。当时感到很诧异，开机只需要按主机上的电源按钮即可，怎么会还有人不知道呢。然后突然回想起自己第一次接触电脑的情景。</p><p>我第一次接触电脑是在初中某个暑假的时候，我爸让我参加县城某培训机构的培训班。培训班教第一天教的内容是五笔打字，老师提前打开了电脑，控制屏幕演示给我们看，然后我们自己练习打字。上完课后老师让我们关机回家。当时我不知道怎么关机，又不敢乱点，只好灰溜溜地找老师帮忙。</p><p>此后几天的上午我都到培训班练习五笔打字，还学习如何使用<em>千千静听</em>，没错，当时的我连怎么使用电脑软件都不会。学了一个星期吧，就没去了。因为那时候培训班是给无业人员晋升技能之类的，要花钱报名考证。我当时是托邻居关系进去的，自然考不了证，所以学了一些基本技能后就不去了。</p><p>后来爸妈给家里配了一台台式机，不过没有拉网线，拿U盘拷了一些打字游戏和当时很火的植物大战僵尸。</p><p>初中是在县城读书，所以也认识了许多住在县城的同学。他们小学在4399打拳皇的时候我还不知道电脑长什么样，他们打CF、地下城的时候我家里还没拉网线。于是当他们一群人去网吧打游戏的时候我根本不感冒，因为我不会玩（我到现在还没去网吧上过网）。</p><p>后来因为要住宿买了人生的第一台手机，是当时铺天盖地卖广告的尼彩手机。现在看来就是个老人机无疑，可是对只接触过键盘机的我来说，这触屏机还是很吸引人的。身边同学也是用的触屏机，不过是iPhone、联想之类的。尼彩虽然是触屏机，但是功能却跟键盘机没什么两样。装不了APP，而且预装的APP都是适配键盘机类型的。所以后来流行起来的微信，我根本装不了，完美错过了第一批使用微信的风潮。一直到高一我才换了一台真正的智能机，联想的，499。</p><p>因为家庭环境不富裕，许多同龄人习以为常的事物我都是慢一拍才了解到，也造成了我比较自卑的心理。</p><p>今天看到这女生，我仿佛看到了当时不会关机的自己。让我想起以前看到的一句比较丧的话——我奋斗了18年才和你坐在一起喝咖啡。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 阶层差距 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>maintain output and create value</title>
      <link href="maintain-output-and-create-value/"/>
      <url>maintain-output-and-create-value/</url>
      
        <content type="html"><![CDATA[<p>今天下午一个师弟说他的老师在班上提到我了，并展示了我的Github。后来了解到是因为疫情期间我关注了他的码云&amp;B站账号，然后他也发现了我的Github账号。可能是因为惠院玩Github的学生太少了吧（问了几个大三师弟都对Github没什么概念），所以给他留下了比较深刻的印象？<br>这应该跟教学环境有关，大学只遇到一个比较年轻的老师让我们用Github做实验，其他老师的教学方式都比较传统。所以惠院计算机学生的水平……</p><p>这对我是一个挺大的激励，之前Github一直默默无闻，现在总算被人关注了。类似的事情还有一件。我一般不怎么玩国内的社交平台，不过即刻一直有保持输出。最近有个本地即友也来玩即刻，并注意到了我。我之前也有发一些跟专业相关的动态，然后他前几天来问我要不要去他那里实习。突然掉下来一个实习机会，不过因为我当时已经答应了要去另一个公司实习便婉拒了。</p><p>所以，保持输出真的很重要啊！你不输出的话别人都不知道有你的存在。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 输出 </tag>
            
            <tag> Github </tag>
            
            <tag> 机会 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>火车驶向云外 梦安魂于九霄</title>
      <link href="%E7%81%AB%E8%BD%A6%E9%A9%B6%E5%90%91%E4%BA%91%E5%A4%96-%E6%A2%A6%E5%AE%89%E9%AD%82%E4%BA%8E%E4%B9%9D%E9%9C%84/"/>
      <url>%E7%81%AB%E8%BD%A6%E9%A9%B6%E5%90%91%E4%BA%91%E5%A4%96-%E6%A2%A6%E5%AE%89%E9%AD%82%E4%BA%8E%E4%B9%9D%E9%9C%84/</url>
      
        <content type="html"><![CDATA[<p>前天考完计网和微机后，大学生活应该算告一段落了。虽然还有大四一年，但基本都不在学校生活，开始接触社会。</p><p>我最近过得怎样呢？应该说很迷茫吧。现在这个阶段大学生提及最多的就是考研、考公和工作的事情。我这个专业大部分学生都去实习了，不过自己的很多朋友都在准备考研或者考公。好像，大家都挺忙的。但是我还在怀念即将失去的大学生活，没有很积极的去找工作，好像大一大二大三在做什么，现在也在做什么。</p><p>前天考完试后打算久违地约人拍照，但是问了一圈，师弟师妹们都在忙着准备迎接新生（新生今天报道）和期末考。就感觉我和他们的生活已经不同了，他们还那么年轻，那么有活力，就像我当初一样。</p><p>然后，今天新生入学。今年因为疫情原因，学校的迎新活动没那么隆重了。让学生从体育馆侧门进来，坐校巴来到少康楼前面报到，各个学院在少康楼那里搭个帐篷迎接新生。我当年入学的时候，也是走的侧门（因为那时候汽车导航到侧门了）。然后打电话给同乡会的师兄过来帮忙借我。同乡会的师兄真的很热情，我那时候是中午来的，他们一知道我来了立马开着女装摩托（那个时候学校还可以开电动车）过来接我。路上人挤人，因为我是从侧门进来的，而我的宿舍在对角线最远的地方，所以当时觉得大学真的好大啊。把行李放在宿舍后出去领军训服，去我们系报道，然后和爸妈吃顿午饭就回宿舍继续收拾了。</p><p>下午其他舍友陆续到齐了。看对面床的舍友没什么事做就问他要不要一起出去吃饭，他答应，然后一起逛了逛学校，有许多扫码关注公众号后就送糖水、送可乐之类的活动。在此后大一大二两年，他成了我在班里关系最好的同学，我们经常一起上课下课。不过他是个有目标的人，大三我跟他的差距越来越大，他也开始经常逃课去图书馆自学。后来他在学校附近租房住，方便他的作息，也不用走去图书馆。然后我跟他的联系也越来越少了。</p><p>其他的事，今天是新生入学的日子也是班里同学回去实习的日子。宿舍有两个舍友去了集中实习单位，今早学校给他们安排大巴接送过去。早上八点就过去，连一起吃午饭的时间都没有，分散实习的其他同学也在今天陆陆续续地离开学校了（因为明天周一）。怎么说呢，看着一群人拉着行李箱进来，另一群人拉着行李箱离开，心里难免有些伤感。就好像本文题目里的歌词——一代人终将老去 但总有人正年轻。</p><p>但是说这么多，生活还是要积极乐观向上啊~</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解锁HZU最佳学习方式</title>
      <link href="%E8%A7%A3%E9%94%81HZU%E6%9C%80%E4%BD%B3%E5%AD%A6%E4%B9%A0%E6%96%B9%E5%BC%8F/"/>
      <url>%E8%A7%A3%E9%94%81HZU%E6%9C%80%E4%BD%B3%E5%AD%A6%E4%B9%A0%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h2><p>都说大学里要想认真学习就不要待在宿舍，因此多仔我从大二开始就经常泡图书馆了（大一忙着在部门跳舞）。可是咱是软件工程专业的学生，每次去图书馆都要带着15.6寸超重的游戏本，难免有些费力。而且图书馆的插座并不多，去晚了就找不到插座了。游戏本的续航能力实在是不敢恭维。因此从大二开始就在寻找最佳的学习方式。</p><h2 id="探索"><a href="#探索" class="headerlink" title="探索"></a>探索</h2><h3 id="方式一：使用图书馆提供的电脑"><a href="#方式一：使用图书馆提供的电脑" class="headerlink" title="方式一：使用图书馆提供的电脑"></a>方式一：使用图书馆提供的电脑</h3><p>HZU每层图书馆都有提供电脑给学生免费使用，但是供不应求。</p><p>优点：解决了电脑问题，而且网速贼快。</p><p>缺点：电脑大多装有还原软件，即那种关机就会把你的资料删除。因此每次开机都要重新安装自己所需的软件、拉取资料，很麻烦。就算重启后资料仍在，你也不能保证每次都占到那台电脑。更何况把资料留在公共场所很危险。</p><h3 id="方式二：使用远程桌面"><a href="#方式二：使用远程桌面" class="headerlink" title="方式二：使用远程桌面"></a>方式二：使用远程桌面</h3><p>Windows电脑都自带远程桌面功能，一般是专业版才有。但是大多数学生购买笔电都是附赠家庭教育版。此时你有两种方法，一升级成专业版；二破解家庭教育版的远程桌面功能。咱经济比较紧张，选择了第二种方法。具体如何破解请自行搜索，咱提供一个<a href="https://zhuanlan.zhihu.com/p/109972051">Win10（家庭版）内网穿透实现远程桌面访问 - 時雨的文章 - 知乎</a>。</p><p>破解完成后咱是很开心的，第一时间在Ipad上下载RD Client来远程我的笔电，结果当然是成功了啦。可是去到图书馆后发现死活连不上宿舍的笔电，这就尴尬了。按理来讲，图书馆和宿舍的校园网都应该是同一局域网，可以互连才对，而且宿舍里Ipad和笔电所连接的校园网是在不同子网内都可以远程成功。折腾了好久都没有搞定，最后只能搞个内网穿透来远程了。具体做法也是参考前面提到的那篇文章<a href="https://zhuanlan.zhihu.com/p/109972051">Win10（家庭版）内网穿透实现远程桌面访问 - 時雨的文章 - 知乎</a>。</p><p>为什么不提TeamViewer之流，因为没用过。但是班上许多同学都是用TeamViewer，反映延迟略大，而且容易误判你在商用。而且原生的Windows远程不香么？</p><h3 id="方式三：利用图书馆的提供的电脑使用远程桌面！！！最佳！！！"><a href="#方式三：利用图书馆的提供的电脑使用远程桌面！！！最佳！！！" class="headerlink" title="方式三：利用图书馆的提供的电脑使用远程桌面！！！最佳！！！"></a>方式三：利用图书馆的提供的电脑使用远程桌面！！！最佳！！！</h3><p>前面提到咱已经实现了在图书馆用Ipad远程宿舍的笔电，但有个缺点就是Ipad的屏幕太小了！！！根本不够看啊。于是咱决定利用图书馆的提供的电脑使用远程桌面。惊喜的是，图书馆的电脑是Win7专业版，自带远程桌面（一开始咱还想着没有的话就帮它破解）。但是更惊喜的是直接进行远程桌面，不需要内网穿透也可以！！！牛逼！绝了！赶紧打开cmd查看这台电脑的IP。意外发现网络居然是无线连接的（之前一直以为是插网线的）。等等，无线……查看这个网络的属性，被我发现了图书馆馆内WIFI密码（前文提到的图书馆WIFI是指校园网，需要使用广东校园进行登录，太恶心了），果然知识就是力量啊。</p><p><img src="https://i.loli.net/2020/09/02/EMZaJ5HkWGiDvtY.jpg" alt="20200902-图书馆某电脑IP.jpg"></p><p><img src="https://i.loli.net/2020/09/02/IMkywrUGqv17ehS.jpg" alt="20200902-WIFI密码.jpg"></p><p><img src="https://i.loli.net/2020/09/02/czPRCy9Iks38dXT.jpg" alt="20200902-效果.jpg"></p><p>当然这种方法也是有缺点滴，就是要早起占电脑~早起的虫儿有鸟吃啊。另外多数电脑都是在靠门口位置，略吵。东座尤甚，图书馆管理员们欢乐的笑声……</p><p>另外在这台电脑桌面上看到一个Html文件，打开看到是一篇CSDN文章，介绍如何<em>将Linux(Ubuntu)安装到U盘上，实现即插即用）</em>，估计也有人懒得带电脑，只不过这太极客了，不适合普通人。</p><p><img src="https://i.loli.net/2020/09/02/XmeyEOIgvpNPqiD.jpg" alt="20200902-U盘安装Linux.jpg"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>懒惰推动进步，多仔真爱折腾~</p>]]></content>
      
      
      <categories>
          
          <category> 超学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 惠州学院 </tag>
            
            <tag> HZU </tag>
            
            <tag> 学习 </tag>
            
            <tag> 远程桌面 </tag>
            
            <tag> Windows </tag>
            
            <tag> 宿舍 </tag>
            
            <tag> 图书馆 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何在DigitalOcean创建你的第一台VPS</title>
      <link href="How-to-create-your-first-VPS-on-DigitalOcean/"/>
      <url>How-to-create-your-first-VPS-on-DigitalOcean/</url>
      
        <content type="html"><![CDATA[<p>在本文中，我将指导您完成在DigitalOcean上设置第一个Linux虚拟专用服务器（VPS）的过程。</p><p>DigitalOcean是最著名的VPS服务商之一。</p><p>DigitalOcean为最著名的应用程序和操作系统提供一键式安装过程，它提供了遍布全球的数据中心和CDN位置。最低消费仅需5美刀/月。</p><p>我认为DigitalOcean是最实惠且易于使用的解决方案之一，并且可以将其用于各种服务。</p><h2 id="一、-创建一个DigitalOcean账号"><a href="#一、-创建一个DigitalOcean账号" class="headerlink" title="一、 创建一个DigitalOcean账号"></a>一、 创建一个DigitalOcean账号</h2><p>您可以使用<a href="https://m.do.co/c/165e0813b0d9">链接</a>获得$100的免费信用额，可在接下来的60天内使用。</p><blockquote><p>免责声明：这是会员链接。 当您使用此链接进行注册时，您将获得100美元的DigitalOcean免费信用额，我将获得25美元的DigitalOcean免费信用额。</p></blockquote><p>我会推荐DigitalOcean不仅仅是因为他们有会员计划。 恰恰相反，由于我经常使用它，所以如果我可以降低账单，我会抓住这个机会。当然，如果您是一名学生，我更建议您使用Github的学生包，它将提供您$50的免费信用额，时限一年。</p><p>进入网站后即可开始注册：<br><img src="https://i.loli.net/2020/08/20/u9Npx8ALl3fsdY2.png" alt="DigitalOcean注册页面"></p><p>注册完成后不要忘记到您的邮箱进行确认。</p><p>接着您需要绑定您的信用卡或者Paypal：</p><p><img src="https://i.loli.net/2020/08/20/YOzfudTRrtoyiQP.png" alt="DigitalOcean绑定信用卡或Paypal"></p><h2 id="二、创建一个项目"><a href="#二、创建一个项目" class="headerlink" title="二、创建一个项目"></a>二、创建一个项目</h2><p>一旦您注册完毕，就可以创建一个新的项目：</p><p><img src="https://i.loli.net/2020/08/20/ykUK5wOZ9p2AVGD.png" alt="创建一个新项目.png"></p><p>单击<strong>Create Project</strong>后，该项目现在已添加到您的项目列表中，并且项目仪表板如下所示：</p><p><img src="https://i.loli.net/2020/08/20/NlEi86RfAc2BVDW.png" alt="DigitalOcean项目仪表板.png"></p><p>这是您要对此项目进行任何操作的控制中心。</p><p>首先，这里有一个<strong>Get Started with a Droplet</strong>的蓝色大按钮。</p><p>什么是Droplet？DigitalOcean Droplet是一个虚拟机，即VPS。DigitalOcean上的所有内容都围绕Droplet展开。</p><p>通过此接口，我们还可以初始化托管数据库，创建空间（用于存储文件的位置）以及创建负载均衡器以在多个Droplet之间分配流量。</p><p>但是，暂时不需要管那么多，我们只需要创建一个Droplet即可。</p><h3 id="创建一个Droplet"><a href="#创建一个Droplet" class="headerlink" title="创建一个Droplet"></a>创建一个Droplet</h3><p>单击<strong>Get Started with a Droplet</strong>按钮，将会显示一个包含很多选项的页面：</p><p><img src="https://i.loli.net/2020/08/20/YuxCjowymHaPbI3.png" alt="Create Droplets.png"></p><p>让我们从上面开始。</p><p><img src="https://i.loli.net/2020/08/20/6FpPQzwdHon8VKs.png" alt="选择镜像.png"></p><p>首先的选择镜像，这里我们可以选择一些Linux发行版（Ubuntu, Fedora, Debian and CentOS）和FreeBSD（另一个UNIX操作系统）</p><p>除了发行版，我们还有其他类别。 特别是通过Marketplace，只需单击一下，我们就可以安装预配置了WordPress，Ghost，LAMP服务器或150多个应用程序中的任何一个的服务器。 这是快速启动和运行任何项目的一种非常方便的方法。</p><p>快照，备份和自定义映像使您可以从已有的服务器创建服务器。</p><p>现在您已经知道在这里可以做的一切，让我们从<strong>Distributions</strong>面板中选择Ubuntu 20.04。</p><p><img src="https://i.loli.net/2020/08/20/nq1dN6Q7MaAFyel.png" alt="选择计划.png"></p><p>在<strong>Choose a plan</strong>中，您可以在“标准”计划（我们将使用的计划）或性能更高的“ CPU优化”或“内存优化”服务器之间进行选择。 这意味着服务器将花费更多。</p><p>这里我们选择“标准”里的$5/mo（按时计费$0.007/hour），即可。</p><p><img src="https://i.loli.net/2020/08/20/o4ZbYGMruQAzgPF.png" alt="选择数据中心区域.png"></p><p>接着我们选择数据中心区域，可以根据您所在位置和运营商来选择。不同的运营商对不同地方的线路优化不同，中国大陆用户建议使用新加坡地区的服务器。</p><p><img src="https://i.loli.net/2020/08/20/pgrnxvycewCY4PT.png" alt="登陆验证方式.png"></p><p>接下来还有其他选项，您可以跳过，让我们选择登录VPS的验证方式：</p><p>选择“密码”可以简化操作，但是对于真实服务器，我建议使用SSH密钥身份验证（设置更复杂，但更安全）。</p><p>输入您要用于root用户（Linux系统管理员）的密码。</p><p><img src="https://i.loli.net/2020/08/20/vf4TkpCNEaIngo2.png" alt="填写机器名.png"></p><p>然后填写对您有意义的机器名：</p><p><img src="https://i.loli.net/2020/08/20/YU8d2k71rjTlOmD.png" alt="Create Droplet.png"></p><p>最后，点击<strong>Create Droplet</strong>按钮，DigitalOcean将开始创建您的第一台VPS。</p><p>一旦创建完成，它将会显示VPS的公网IP地址：</p><p><img src="https://i.loli.net/2020/08/20/fA7qSDbYXWtLhFN.png" alt="创建成功.png"></p><p>单击机器名以显示Droplet仪表板：</p><p><img src="https://i.loli.net/2020/08/20/HNPfbKX6RzcUs5L.png" alt="20200820-Droplet仪表板.png"></p><p>在这里您可以控制任何东西。 您可以将其开机、关机等等。</p><p>请记住，Droplet关机并不会停止DigitalOcean计费：您必须销毁它才能停止计费。</p><h2 id="三、连接您的第一台VPS"><a href="#三、连接您的第一台VPS" class="headerlink" title="三、连接您的第一台VPS"></a>三、连接您的第一台VPS</h2><p>连接的方法有许多，在Windows平台，您可以通过如<a href="https://www.netsarang.com/zh/xshell/">Xshell</a>、<a href="https://www.putty.org/">PuTTY</a>。我常用的是Xshell，您只需在官网选择<a href="https://www.netsarang.com/zh/free-for-home-school/">家庭/学校版</a>，注册即可免费使用。</p><p><img src="https://i.loli.net/2020/08/20/uBMlXJQWrvtZbRN.png" alt="Xshell教育版.png"></p><p>下载并安装完Xshell后双击运行会弹出会话框，点击<strong>新建</strong>，然后按右侧所示依次填入名称（自定义）、主机（您的公网IP）和端口号（默认是22）：</p><p><img src="https://i.loli.net/2020/08/20/ZIrBeMjRAydVW2h.png" alt="Xshell连接1.png"></p><p>接着点击<strong>用户身份验证</strong>，右侧依次填入root（以超级管理员身份登陆）、密码（您创建时所设置的密码）：</p><p><img src="https://i.loli.net/2020/08/20/bdXYDZyExQarVv1.png" alt="Xshell设置登陆密码.png"></p><p>然后点击连接，第一次连接会出现如下所示警告，选择<strong>接受并保存</strong>即可：</p><p><img src="https://i.loli.net/2020/08/20/ylo6WFDK43heQLk.png" alt="接受并保存密钥.png"></p><p>出现如图所示信息即表示您已连接成功！！！</p><p><img src="https://i.loli.net/2020/08/20/7zhlPawvTpGZuJF.png" alt="Xshell连接成功.png"></p><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><p>现在，您可以完全控制位于世界某个地方的数据中心中的计算机。</p><p>这不是很酷吗？ 这仅仅是个开始。</p><p>接下来我将会写一系列文章介绍VPS的一些用途，敬请期待！</p>]]></content>
      
      
      <categories>
          
          <category> 煮鸡 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VPS </tag>
            
            <tag> DigitalOcean </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对惯性思维的生活观察</title>
      <link href="%E5%AF%B9%E6%83%AF%E6%80%A7%E6%80%9D%E7%BB%B4%E7%9A%84%E7%94%9F%E6%B4%BB%E8%A7%82%E5%AF%9F/"/>
      <url>%E5%AF%B9%E6%83%AF%E6%80%A7%E6%80%9D%E7%BB%B4%E7%9A%84%E7%94%9F%E6%B4%BB%E8%A7%82%E5%AF%9F/</url>
      
        <content type="html"><![CDATA[<blockquote><p>昨天家里一楼电视坏了，今天把二楼的电视搬下去给爷爷奶奶看。</p></blockquote><p>一楼的电视平时都是爷爷奶奶在看，看的是有线数字电视。二楼的电视平时不怎么看，所以就搬下去一楼顶着先。爷爷奶奶让我播珠江台，但是我不会设置有线数字电视的信源，就让爷爷奶奶先看网络连接的电视剧好了。</p><p>按理来讲，网络电视的电视资源更丰富，而且我也播了爷爷奶奶喜欢看的抗日剧给他们了。但是他们看了没一会儿就关了。后来我成功设置了有线数字电视的信源后电视就一直在播放了。我推测原因是因为爷爷奶奶不适应网络电视的操作。有线数字电视使用遥控器选择频道就能播放了，但是网络电视是用遥控器控制菜单，对老人家确实有一定的难度。其次他们已经习惯了根据卫视的时间表跳台，XX台XX时间段播XX剧就跳转过去；但是网络电视却不是这种模式，你想看什么就看什么（但是播放前要先观看广告，这也会让老人家好感下降）。</p><p>前段日子我换了家里的路由器，WIFI也跟着换了，信号质量和速度都比以前好很多。但是没过几天我爸就让我换回原来的WIFI，因为家里的监控摄像头连接的是原来的WIFI。我说摄像头换个WIFI就好了，然后我爸又说这WIFI没用，一到卫生间就没信号（因为我帮他连接的是5G频道，速度快但是范围小，后面改成连接2.4G省事算了）。我爸把这些责任都推到新换的WIFI身上，新WIFI带来的改变是他难以接受的。</p><p>上述两个例子都反映出我家人对改变的抗拒，或者说是惯性思维。关于惯性思维，维基百科是如下介绍的：</p><blockquote><p>惯性思维指人习惯性地因循以前的思路思考问题，仿佛物体运动的惯性。惯性思维常会造成思考事情时有些盲点，且缺少创新或改变的可能性。</p></blockquote><p>未完待续……</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
            <tag> 惯性思维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>融入社会以及一些新发现</title>
      <link href="%E8%9E%8D%E5%85%A5%E7%A4%BE%E4%BC%9A%E4%BB%A5%E5%8F%8A%E4%B8%80%E4%BA%9B%E6%96%B0%E5%8F%91%E7%8E%B0/"/>
      <url>%E8%9E%8D%E5%85%A5%E7%A4%BE%E4%BC%9A%E4%BB%A5%E5%8F%8A%E4%B8%80%E4%BA%9B%E6%96%B0%E5%8F%91%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="王者荣耀"><a href="#王者荣耀" class="headerlink" title="王者荣耀"></a>王者荣耀</h2><p>我从高中开始就很少接触网游、手游，甚至上了大学后也仅限玩一些单机游戏。为什么会这样呢？应该是家庭环境影响了我。小时候家所在的地方比较偏僻，而且周围没什么同龄人。所以当小朋友们在网吧一起打拳皇、CF、地下城的时候，我甚至连电脑是什么样子的都不知道。一直到高中我的社交圈都很狭窄，因为我跟同龄人都没什么共同话题。</p><p>高考结束后我曾下载过王者荣耀，但是很快就删掉了。因为那个时候王者荣耀已经很火了，玩的人都已经很熟练了，我一个新手经常挂掉，导致经常被队友嘲讽。于是卸载了，毕竟很没有面子而且很没有成就感。上大学的时候王者荣耀就更火了，不止男生，连女生都开始玩。记得有一次出去聚餐，几个人打开了王者，当时暗恋的女生，感觉挺文静的，没想到也会打王者。让旁边的男生带她打排位。那时吃醋的心情……</p><p>最近在家太无聊了，也学不下去，在舍友怂恿下下载了王者。玩了几天感觉还可以，毕竟有舍友带躺。而且认识的几个学妹（没怎么聊过天）看见我在玩，就问我怎么开始打王者了，还说要带我。</p><p>游戏这玩意，不能说它一定是坏的。有个学霸舍友经常在图书馆学习，回来宿舍后打两把地下城就休息。游戏可以给我们降低沟通成本，提供好友之间的话题。不能因为容易沉迷就一味地抗拒它。</p><h2 id="抖音"><a href="#抖音" class="headerlink" title="抖音"></a>抖音</h2><p>我妈在家吃完晚饭后习惯刷抖音，有段时间我经常听到同一BGM的声音，听起来像电视剧的片尾曲（别问我为什么听得出来）。然后我就问我妈是不是在看电视剧，她说是的。跟她说不要用手机屏幕看电视剧，对眼睛不好，用电视看。结果她看了几天后又开始在抖音上看了。</p><p>当时也没在意，前几天自己下载抖音后发现原来抖音还真能看电视剧，而且很容易沉迷用抖音看电视剧。</p><p>它是怎么做的呢？一些用户把一集电视剧里的精彩部分/重要部分剪辑成短视频。这个短视频虽然是缩水的，但是剧情上没太大影响，而且都是精彩片段，很容易吸引人。在看完一个后很想继续看下去。有时候用户没有剪辑完全部剧集，没关系，抖音的推荐算法会在你下一次打开抖音，而且刚好用户剪辑了新的短视频的时候推送给你。把你留在抖音。</p><p><img src="https://i.loli.net/2020/08/10/wmNpM9jY1dEHBsQ.jpg" alt="20200810-抖音上看火影.jpg"></p><p>这个操作我是真没想到，但是它却很有用。在这个快消时代，看一集电视剧可能要二十多分钟；在抖音，两三分钟就看完，并且不影响你对剧情的理解。这个过程就有点像它把吃过的东西吐出来给你吃，你还吃得很香。</p><p>另外抖音上有个叫川久保玲球的用户，她上传的视频都是和一些普通老百姓的合照，比如小卖铺老板、环卫工人等。她是做什么的？我看到她有在卖衣服，但是与常人不一样的是，她选择跟身边的普通人合照，也没有特意去拍衣服，仅仅只是合照。但是与常人不同，就代表她成功了一半了。如果她坚持下来，那她也离成功不远了。事实上，现在她的粉丝数和获赞数就已经很高了。</p><p><img src="https://i.loli.net/2020/08/10/vzqeBXG6LAWx4ap.png" alt="20200810-川久保玲球.png"></p><p><img src="https://i.loli.net/2020/08/10/rBCkMmtlIHKRU35.jpg" alt="20200810-川久保玲秋个人主页.jpg"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以前我有个误区，一直觉得在抖音、微博或者其他社交平台在做广告的用户都是不好的，在恰烂钱。但是前几天看当下频道出的一个讲小红书博主的视频的时候，被她的一个观点点醒了。她认为，自己做广告的同时是在降低观众获取新知识的门槛。可能一个五分钟的视频是她花费一个星期去策划，去提炼内容，让观众可以更容易地接受。同时做一条广告后要出四个无广告视频来维持用户粘性，这会要求她投入更多的精力去做好一个博主。</p><p>回到王者和抖音上，传统观点认为游戏或者社交平台会毁了我们的生活。主要原因是它们容易让我们沉迷，脱离现实生活。但是，对个人而言，你没有那么伟大。如果你改变不了时代发展的潮流，那你就去适应它。尤其是游戏和社交正慢慢变成“现实”。</p><p>油管上有关注一个用户<a href="https://www.youtube.com/channel/UCctXZhXmG-kf3tlIXgVZUlw">GaryVee</a>，他有做过一些视频，大意是讲年轻人应该去适应生活，要抓住机遇，不要视TikTok或者Instagram为洪水猛兽，要利用它们赚钱。我个人觉得这个想法是对的，不能抱着旧观念不放。而且我出来社会，我不赚钱，我出来干什么？一些视频可能会跟你说不忘初心，不要老想着钱。但是如果你连维持自己的生活需要都做不到，还谈什么改变世界。并且有钱后才能有更大的能力去做你想做的事情。</p><p><img src="https://i.loli.net/2020/08/10/BLlJX6cyR7ESHkd.jpg" alt="meme-我出来打工.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 王者荣耀 </tag>
            
            <tag> 抖音 </tag>
            
            <tag> 社交 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>height: 100%无效？</title>
      <link href="height-100-%E6%97%A0%E6%95%88%EF%BC%9F/"/>
      <url>height-100-%E6%97%A0%E6%95%88%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<p>昨晚在做一个小demo时想要实现水平垂直都居中的效果，使用flex布局，CSS样式如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="https://i.loli.net/2020/07/21/5ytnCKTG7mJVgY4.png" alt="2020-07-21_初始效果.png"></p><p>可以看到水平居中生效了，但垂直方向上并没有居中。google一番后发现可能是没有指定高度，遂加上<code>height: 100%</code>，结果还是不行。试着给出具体值，如<code>height: 600px</code>，发现确实有居中。因此一定是<code>height: 100%</code>有问题。</p><p>F12右键检查，发现父元素的高度跟container一样高，因此原因很可能是出在父元素身上。</p><p><img src="https://i.loli.net/2020/07/21/GctgyE9LKV46QZT.png" alt="2020-07-21_父元素跟子元素一样高.png"></p><p>google一番后发现原来浏览器默认的body和html高度是auto。因此需要使用如下代码进行指定：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span>, <span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外块元素的高度也需要设置或者由内容的高度来决定。</p><p><img src="https://i.loli.net/2020/07/21/iq2fLHEvR9b61kp.png" alt="2020-07-21_最终效果.png"></p><p>说起来，这个问题好像在大二刚接触前端的时候也有搜索过，看来不会的还是要多多记录下来，以后还可以回过头来看看自己踩过的坑</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>不经意间的愤怒是可怕的</title>
      <link href="%E4%B8%8D%E7%BB%8F%E6%84%8F%E9%97%B4%E7%9A%84%E6%84%A4%E6%80%92%E6%98%AF%E5%8F%AF%E6%80%95%E7%9A%84/"/>
      <url>%E4%B8%8D%E7%BB%8F%E6%84%8F%E9%97%B4%E7%9A%84%E6%84%A4%E6%80%92%E6%98%AF%E5%8F%AF%E6%80%95%E7%9A%84/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">输入密码，查看文章。</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="ff36eb7b25dd3ab0b45dfffee7363ee091d486afe1fbc86e2e7d8711d02bdeb8">39c7b9a45a4951d44449ca8323d11d90f602dca03304520ce4f40c8d482cedae843976c3f4430e6754a086faf8c1332196a126854abf237727ddb7d1ca6a67c508084b531ef99a751e22c307e08128d704c7a8893f0020b21b2a1919a39d6897127c052f2f59922ece21681e552f49b207a7781d3d93f7dca9e27a39e7c1693c11acf5c69da864034ae5c3757aff90785bab978c586a726068be9203465186086c0da668021f58d9b3ff9fddfdfd5ef61a1c0d312d6adc15f02140ea28b7d5df73e24f4d437d2324bf274b91a76a97bcbee47cfb7af45f4e483ad4eb84da03960b4c2a39f4812b914f1f4b597a82da2c1592bbd8054f6cf83ee3297879cf72251996b8886a10466e2bbfa96ba61a0dba7d19b870d8504850a0e009fb4f7980963bcea244059c4f15e0218687c56641a92f9262a14945d9468820cd31008a3d22f02d433726e59b671094509ccc691288a61bfcf4702cd32af824f7ffc2112bf3ef6a86628a790db36d426bcd5d139ca1cb505b1dbebb0dee1bc4b23cc5a263362b283fa9b807684f7611e467e5ffba59834309e9cf9d128f5141b7fd85b6f8ae81deabc402e8a12443cf0caf3fabb8ea234999f94794faec34538efabdc21175c275bfe098435c9ff69873f9d0b090676091d884edf2b581f04845c276c2fa2237622b92f1da65eead1d01eac3b262fbcf41cb90cbce7ac571cb7f396da19ee61f27dae6707f24495d58b93867b4513fdd6c3636ab8a1bc7da9f69e3801c12ff787aa057e79ec9eaecd6c068015ecf37dee6233b04047c6c65e5720879c2ed961e8f30af13dae3af20988cad8742e7af860ec41e8b762df4ae028de351a57d904f6d9f6d296a8655ad632b6691c2266c27efa6dd536977366e667a806b069d4fef41f6c4f90e2f673088e6f42595b70bc4f92424f1cb052131004677637f30ef43541b30a85139c996d3c25aaa354752c72f5c855ec787834f9d32f05effdd4f51cb734ecfa6a1f6a3114172ef4e413b29dd8c8f2a074a611a9d687fd58a4cf0e732ebfdf8f76b439d641882e7d8cc7614fc6ab42581f38810f7a24eb4ef52272d5f117e7e43016945ff556c4449f66c4f9447c91a3ecca7dbef67a080bbcfc79603b954332cf2d13a5c7c0b6043fb45fd1cabed3e511f521f91e1f18274e267a4341c0ea69c2d4958d22ef5bac3e3e046064cb98306f4d00ebbc5df9e2f35ba4b9643349f150b78d565589f87e7b4d14a98a9e79847f25cf9178d487e1ace8d305f52218de06d3d419017388cbdbb7dd7dfa659811b923c9ffad6d6b7cf2c8574bbf9a6ba6171427954c518260c7696371a982524337a8b42dd119c8452dbf638f05bbf3a2f3151c247adb424c981092faa0b69f11139f4218bf47967cd625aedf4731e626ad697839ed8bfbe33508040be61268d68bf9c899c136247c90c6557cc57b0aeb9b64b7a47aeda88367e75375ea48a211a253a5dd575e475ab090193a5116f926001cfc35c04e30fed074392d1beb8efa47ca738193b95cfc57f197b0a0db6c5c94ac54b5960412b1ae88f088f7070cb87dced433c293a295fd303600bdcd0bf6d8fe261d78ceb9e4cf55aa617998b0c3e84259c38735915686ddc686fee49390b2f1b914094d9b6392d9e7acdf36af7f299ba2f1e7d47dc7b2818280c3cd8cc9189bf0af528fe2dd70e1da6f421ceada8dbcc00a13c94cb63dc2d1a6cf6010b32917f7d10fc1623d22f2a48eca807ce2b908a8c62132fff8cfc03f15447f09255f6ac776c406b79f7cb43a99f3ad9d3f0f03bba90d736c3c7a1ec8a7fa6ab8af299ac8bb52263a63495dc1ddf64d5f1101edb394cd7cb2bd36420f8ffd332e902486d3ef387cac5b0c0dbeebc63e03a9a520f49c6cdfa70e95f7fd656ac65e395a3108a81755fb40b5bdc50b3037c405e548e4efc150f2eba3e6d1d4e5f71404d6091d0cdb9d9345c47155cc0b0ced87438c797c71638eed81dd06efe4b581157560519ab570bd65818a48026397e93bb7b5870065babdc6711ef2e470d7b51ac837774983dfa47b2b53196f24eba11f8af54c2936a0f9ae2c1aa64d1933e82ee6cc7a12811844112bd9427f2d99bb57f1edd9d8f6f26cfa1a0058f54a8a993d6f7f4f036274276a25d20fd8458a43d8ddf561e537cc45482e985cdcd8d75aa1f3bdc83f9d0cc64c1cdc92d46041c61ff32c6970ddeeb3558f3f044a3555948ae253d1b9e27e685209ac71a172da42a1e24ef344d8b41ced28042c7883ad264b1e2d05c7ced10c44fdd6afda4d50dfbba95aba9134d8ab3e5555858e9a1b6e43efb69818badaa5c8ba532de7eed82a16d9cf7fed3bcb9712ff9366484ea75381d92eaab77124a59a82fe27274d974a7744531b304cd7568d1975404fd0fab18bddc956a029b75d20bde9cf6a8afc437f9df46742d7979335c9c3fd43453f5d7ccf7e8694e4f6d8b183195c8a73836ae7db3fa853c9d9847581c0b80c582a2cbae1c4a3c8a188f85b23d7ad2300cc8febbed4d5e4ee75202597835ef81984556019cdaf30a602a59dad8abf41ea51856e1be79ebdb095c11bd678dae0bae5afa112079647737456f4ac32daf50a5d12f2fd4efd1cc5f6f86257f3ccf34479bd4a429e16ee69a96159d77c72ba76cd1bd20ace2bff17ead8df14900</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 情绪 </tag>
            
            <tag> 家人 </tag>
            
            <tag> 语言 </tag>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript、ES6、TypeScript之间的关系</title>
      <link href="JavaScript%E3%80%81ES6%E3%80%81TypeScript%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB/"/>
      <url>JavaScript%E3%80%81ES6%E3%80%81TypeScript%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB/</url>
      
        <content type="html"><![CDATA[<blockquote><p>今天复习前端三剑客之<strong>JavaScript</strong>。</p></blockquote><h2 id="JavaScript和ES6"><a href="#JavaScript和ES6" class="headerlink" title="JavaScript和ES6"></a>JavaScript和ES6</h2><p>JavaScript看了也挺多遍了，在学习过程中经常遇到ES6和TypeScript这些字眼。以前因为没接触过，所以不自觉地就觉得它们高深莫测，好像很难的样子。今天不知道看什么资料复习，找到了以前经常看的<a href="https://www.youtube.com/channel/UCazV3A3_1-Mtd6E_auw_ifg">小马技术频道</a>，里面刚好有讲ES6，遂把这个<a href="https://www.youtube.com/playlist?list=PLliocbKHJNwu150Kc7_eEywQBFLTJyPZs">系列视频</a>看了一遍。视频不算多，一共就23个视频，每个视频大概五六分钟时长。看完后发现ES6的一些语法其实我之前也有接触过、使用过，只不过当时并不知道而已。</p><p>那么ES6和JavaScript之间到底有什么关系呢？根据个人理解，<strong>ES6是一个规范，而JavaScript是具体实现</strong>。当然除了ES6还有其他版本ES，只不过目前ES6较为流行和普适。</p><h2 id="JavaScript和TypeScript"><a href="#JavaScript和TypeScript" class="headerlink" title="JavaScript和TypeScript"></a>JavaScript和TypeScript</h2><p>那么<a href="https://www.typescriptlang.org/">TypeScript</a>又是什么呢？<a href="https://www.youtube.com/channel/UCazV3A3_1-Mtd6E_auw_ifg">小马技术频道</a>里也有一个TypeScript的<a href="https://www.youtube.com/playlist?list=PLliocbKHJNwtCfLQu5U3LF_AS-wuP6M7w">系列视频</a>，不过目前还没看完。根据维基百科的介绍：</p><blockquote><p>TypeScript是一种开源的编程语言，该语言项目由微软进行维护和管理。TypeScript不仅包含JavaScript的语法，而且还提供了静态类型检查以及使用看起来像基于类的面向对象编程语法操作Prototype。</p></blockquote><p>大众说法说，TypeScript是JavaScript的超集。简单理解就是<strong>语法上合法的JavaScript，一定是合法的TypeScript。</strong></p><h3 id="如何使用TypeScript呢？"><a href="#如何使用TypeScript呢？" class="headerlink" title="如何使用TypeScript呢？"></a>如何使用TypeScript呢？</h3><p>在win10操作系统下，您可以通过<code>npm install -g typescript</code>进行安装，安装完成后使用<code>tsc -v </code>进行检查，若出现版本号则表示安装成功。</p><p>编写一个以<code>ts</code>为后缀的文件，接着使用<code>tsc $&#123;fileName&#125;.ts</code>进行编译，编译成功后就可以看到多出来一个<code>$&#123;fileName&#125;.js</code>文件，直接运行<code>node $&#123;fileName&#125;.js</code>即可。</p><p>另外，学习JavaScript过程中也经常遇到<a href="https://babeljs.io/">Babel</a>这个名词，通俗理解，Babel解决并不是所有浏览器都支持高版本JavaScript的问题。它可以将高版本JavaScript转变为低版本。</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> ES6 </tag>
            
            <tag> TypeScript </tag>
            
            <tag> Babel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>人生苦短，及时行乐</title>
      <link href="%E4%BA%BA%E7%94%9F%E8%8B%A6%E7%9F%AD%EF%BC%8C%E5%8F%8A%E6%97%B6%E8%A1%8C%E4%B9%90/"/>
      <url>%E4%BA%BA%E7%94%9F%E8%8B%A6%E7%9F%AD%EF%BC%8C%E5%8F%8A%E6%97%B6%E8%A1%8C%E4%B9%90/</url>
      
        <content type="html"><![CDATA[<p>最近情绪不太稳定，有时候是积极的，有时候是消极的。还经常回忆过去，想着当时应该怎么怎么做才对。可惜呀~人生苦短，过去的事情无法改变了。而未来，似乎也没剩下多少时间。随着年龄的增长越来越觉得时间短暂了。也因为如此时常变得焦虑，总觉得要做的事情有很多，但是又不想去做，就这么拖着。</p><p>不应该这样吧？我应该变成一个积极乐观向上的人才对。</p><p>也可能是因为我所接触的人都没什么朝气？应该是有这部分影响的。昨天看油管上看了一个台湾油管主的视频感觉特别有活力啊。其实上学期教我们软件工程课程的台湾老师也很有活力，虽然看上去有50左右了吧，心态却跟20岁差不多。国外看到的很多视频主都很有活力，国内看到的大部分都很拘谨，虽然也有笑容，但看不出他们有活力，感觉被什么东西压着。</p><p>一直觉得互联网应该让人们变得更开放、更包容。但是国内互联网却把人极端化、偏见化，非黑即白。虽然生活中大部分人都是灰色的，但是一到网上，大家就不自觉地开始站队，要么支持这个，要么支持那个。</p><p>对了，傍晚约了个师妹拍照。好久没拍照了，拍照应该是我在大学做的最开心的事情了，可以预见许多人，可以收到许多人的赞美，可以改变自己的生活，这是一件正确而快乐的事情。</p><p>我要成为什么样的人呢？成为多度橙吧，做很多快乐的事情。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
            <tag> 碎碎念 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bilibili评论转图片神器开发日志-CSS Variables使用</title>
      <link href="Bilibili%E8%AF%84%E8%AE%BA%E8%BD%AC%E5%9B%BE%E7%89%87%E7%A5%9E%E5%99%A8%E5%BC%80%E5%8F%91%E6%97%A5%E5%BF%97-CSS-Variables%E4%BD%BF%E7%94%A8/"/>
      <url>Bilibili%E8%AF%84%E8%AE%BA%E8%BD%AC%E5%9B%BE%E7%89%87%E7%A5%9E%E5%99%A8%E5%BC%80%E5%8F%91%E6%97%A5%E5%BF%97-CSS-Variables%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>最近在开发<a href="tool.mightyherox.me">Bilibili评论转图片神器</a>，功能是将Bilibili视频评论区的评论转换成PNG图片。</p></blockquote><p>在开发评论模块过程中想要实现按键切换修改评论背景和文字颜色的功能，代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;d-flex flex-wrap align-items-start justify-content-center&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;comment&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;item in comments&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;comment&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;&#123; &#x27;comment-dark&#x27;: darkTheme &#125;&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">:style</span>=<span class="string">&quot;&#123; &#x27;border-radius&#x27;: borderRadius + &#x27;px&#x27; &#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;author-thumbnail&quot;</span> <span class="attr">:src</span>=<span class="string">&quot;item.member.avatar&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;comment-main&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;user-name&quot;</span>&gt;</span>&#123;&#123; item.member.uname &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span> <span class="attr">v-html</span>=<span class="string">&quot;item.content.message&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;published-time&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;displayTime&quot;</span>&gt;</span>&#123;&#123; timestampFormat(item.ctime) &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.comment</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#f9f9f9</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">4px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">360px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.comment</span> <span class="selector-class">.author-thumbnail</span> &#123;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">flex-shrink</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">40px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.comment</span> <span class="selector-class">.comment-main</span> <span class="selector-class">.user-name</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#222</span>;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">700</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">18px</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.comment</span> <span class="selector-class">.comment-main</span> <span class="selector-class">.content</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#222</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">2px</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.comment</span> <span class="selector-class">.comment-main</span> <span class="selector-class">.published-time</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#aaa</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">26px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.comment-dark</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#181818</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用的是Vue，当<code>darkTheme</code>为<code>true</code>时，显示<code>comment-dark</code>样式，利用CSS层叠性覆盖前面<code>comment</code>设定的背景和文字颜色。但是实际过程中遇到了CSS权重问题，只能修改背景颜色而无法修改文字颜色。</p><p>google后发现有CSS Variables这么个东西，它的主要特点和用法是：</p><ol><li>可以继承</li><li>以<code>--</code>开头来命名/定义变量（区分大小写）</li><li>用var()来读取变量值</li></ol><p>这样的话，我只需要进行如下修改即可完成想要的效果：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.comment</span> &#123;</span><br><span class="line">    <span class="attribute">--bi-spec-general-background</span>: <span class="number">#f9f9f9</span>;</span><br><span class="line">    <span class="attribute">--bi-spec-text-primary</span>: <span class="number">#222</span>;</span><br><span class="line">    <span class="attribute">--bi-spec-text-secondary</span>: <span class="number">#aaa</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">var</span>(--bi-spec-general-background);</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">4px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">360px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.comment-dark</span>&#123;</span><br><span class="line">    <span class="attribute">--bi-spec-general-background</span>: <span class="number">#181818</span>;</span><br><span class="line">    <span class="attribute">--bi-spec-text-primary</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">--bi-spec-text-secondary</span>: <span class="number">#aaa</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.comment</span> <span class="selector-class">.author-thumbnail</span> &#123;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">flex-shrink</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">40px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.comment</span> <span class="selector-class">.comment-main</span> <span class="selector-class">.user-name</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">var</span>(--bi-spec-text-primary);</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">700</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">18px</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.comment</span> <span class="selector-class">.comment-main</span> <span class="selector-class">.content</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">var</span>(--bi-spec-text-primary);</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">2px</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.comment</span> <span class="selector-class">.comment-main</span> <span class="selector-class">.published-time</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">var</span>(--bi-spec-text-secondary);</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">26px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考：</p><p><a href="https://ithelp.ithome.com.tw/articles/10187737">30 天 CSS 隨手筆記 - 第 12 天 - CSS Variables~!!</a></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Bilibili </tag>
            
            <tag> Front-end </tag>
            
            <tag> 前端 </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bilibili评论转图片神器开发日志-JSZip使用</title>
      <link href="Bilibili%E8%AF%84%E8%AE%BA%E8%BD%AC%E5%9B%BE%E7%89%87%E7%A5%9E%E5%99%A8%E5%BC%80%E5%8F%91%E6%97%A5%E5%BF%97-JSZip%E4%BD%BF%E7%94%A8/"/>
      <url>Bilibili%E8%AF%84%E8%AE%BA%E8%BD%AC%E5%9B%BE%E7%89%87%E7%A5%9E%E5%99%A8%E5%BC%80%E5%8F%91%E6%97%A5%E5%BF%97-JSZip%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>最近在开发<a href="tool.mightyherox.me">Bilibili评论转图片神器</a>，功能是将Bilibili视频评论区的评论转换成PNG图片。</p></blockquote><p>开发这个工具的思路是使用<a href="https://html2canvas.hertzen.com/">html2canvas</a>将获取到的评论转成PNG图片，再通过<a href="https://stuk.github.io/jszip/">JSZip</a>打包下载。</p><p><a href="https://stuk.github.io/jszip/">JSZip</a>使用起来挺方便的，官网也有示例。在开发过程中遇到的一个问题是想要获取文件压缩打包的进度，我在中文搜索环境下找不到相关内容，不过在JSZip的github issues中找到了相关<a href="https://github.com/Stuk/jszip/issues/373">记录</a>。</p><p>代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">for(var a&#x3D;0; a &lt; name.length; a++) &#123;</span><br><span class="line">  zip.file(&quot;DXFs&#x2F;&quot; + name[a] + &quot;.dxf&quot;, toDXF(shape));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">zip.generateAsync(&#123;type: &quot;blob&quot;, streamFiles: true&#125;, function updateCallback(metadata) &#123;</span><br><span class="line">  element.style.width &#x3D; metadata.percent + &#39;%&#39;;</span><br><span class="line">&#125;)</span><br><span class="line">.then(function (blob) &#123;</span><br><span class="line">  saveAs(blob, &quot;Files.zip&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Bilibili </tag>
            
            <tag> Front-end </tag>
            
            <tag> 前端 </tag>
            
            <tag> JSZip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bilibili评论转图片神器开发日志-html2canvas使用</title>
      <link href="Bilibili%E8%AF%84%E8%AE%BA%E8%BD%AC%E5%9B%BE%E7%89%87%E7%A5%9E%E5%99%A8%E5%BC%80%E5%8F%91%E6%97%A5%E5%BF%97-html2canvas%E4%BD%BF%E7%94%A8/"/>
      <url>Bilibili%E8%AF%84%E8%AE%BA%E8%BD%AC%E5%9B%BE%E7%89%87%E7%A5%9E%E5%99%A8%E5%BC%80%E5%8F%91%E6%97%A5%E5%BF%97-html2canvas%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>最近在开发<a href="tool.mightyherox.me">Bilibili评论转图片神器</a>，功能是将Bilibili视频评论区的评论转换成PNG图片。</p></blockquote><p>开发这个工具的思路是使用<a href="https://html2canvas.hertzen.com/">html2canvas</a>将获取到的评论转成PNG图片，再通过<a href="https://stuk.github.io/jszip/">JSZip</a>打包下载。</p><p><a href="https://html2canvas.hertzen.com/">html2canvas</a>这个工具的使用挺简单的，官网也有示例。</p><p><img src="https://i.loli.net/2020/07/11/pc68nZG7IYkA4Qt.png" alt="html2canvas官网"></p><p>以下记录自己遇到的一些问题：</p><h2 id="图片空白？"><a href="#图片空白？" class="headerlink" title="图片空白？"></a><del>图片空白？</del></h2><p><del>我使用的是Vue，推测原因是DOM还没渲染完，html2canvas就开始转图片了。解决方法是使用nextTick，等DOM渲染完了再转图片。</del></p><blockquote><p><del>在created()钩子函数执行的时候DOM 其实并未进行任何渲染，而此时进行DOM操作无异于徒劳，所以此处一定要将DOM操作的js代码放进Vue.nextTick()的回调函数中。与之对应的就是mounted()钩子函数，因为该钩子函数执行时所有的DOM挂载和渲染都已完成，此时在该钩子函数中进行任何DOM操作都不会有问题 。<br><a href="https://juejin.im/post/5a6fdb846fb9a01cc0268618">简单理解Vue中的nextTick</a></del></p></blockquote><p><em>2020年7月30日 更新</em></p><p>昨天把nextTick去掉未发现空白问题，估计当时是由于别的原因造成的，现在无法重现问题。</p><h2 id="canvas中含有跨域图片，图片不显示？"><a href="#canvas中含有跨域图片，图片不显示？" class="headerlink" title="canvas中含有跨域图片，图片不显示？"></a>canvas中含有跨域图片，图片不显示？</h2><p>html2canvas默认不显示跨域图片，需要在配置中开启</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 允许跨域（图片相关）</span><br><span class="line">allowTaint: true,</span><br><span class="line">&#x2F;&#x2F; 允许跨域（图片相关）</span><br><span class="line">useCORS: true,</span><br></pre></td></tr></table></figure><h2 id="窗口有滚动，图片显示有偏差？"><a href="#窗口有滚动，图片显示有偏差？" class="headerlink" title="窗口有滚动，图片显示有偏差？"></a>窗口有滚动，图片显示有偏差？</h2><p>需要计算绘制元素的位置，具体代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">this.$nextTick(() &#x3D;&gt; &#123;</span><br><span class="line">    setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">        &#x2F;&#x2F; 获取需要绘制的元素</span><br><span class="line">        let comments &#x3D; this.$refs.comment;</span><br><span class="line">        for (let i &#x3D; 0; i &lt; comments.length; i++) &#123;</span><br><span class="line">            &#x2F;&#x2F; 评论内容做图片名</span><br><span class="line">            let imgName &#x3D; comments[i].innerText.split(&quot;\n&quot;)[1];</span><br><span class="line">            &#x2F;&#x2F; 返回元素的大小及其相对于视口的位置</span><br><span class="line">            let rect &#x3D; comments[i].getBoundingClientRect();</span><br><span class="line">            &#x2F;&#x2F; 不知为何rect.x返回的坐标不准确，需要加上8.5才行</span><br><span class="line">            rect.x +&#x3D; 8.5;</span><br><span class="line">            &#x2F;&#x2F; 获取滚动轴滚动的长度</span><br><span class="line">            let scrollTop &#x3D; document.documentElement.scrollTop || document.body.scrollTop</span><br><span class="line">            &#x2F;&#x2F; 获取dom 宽度</span><br><span class="line">            let width &#x3D; comments[i].offsetWidth</span><br><span class="line">            &#x2F;&#x2F; 获取dom 高度</span><br><span class="line">            let height &#x3D; comments[i].offsetHeight</span><br><span class="line">            html2canvas(comments[i], &#123;</span><br><span class="line">                &#x2F;&#x2F; 允许跨域（图片相关）</span><br><span class="line">                allowTaint: true,</span><br><span class="line">                &#x2F;&#x2F; 允许跨域（图片相关）</span><br><span class="line">                useCORS: true,</span><br><span class="line">                &#x2F;&#x2F; 截图的背景颜色</span><br><span class="line">                backgroundColor: &#39;transparent&#39;,</span><br><span class="line">                &#x2F;&#x2F; 图片x轴偏移量</span><br><span class="line">                x: rect.x,</span><br><span class="line">                &#x2F;&#x2F; 图片宽度</span><br><span class="line">                width: width,</span><br><span class="line">                &#x2F;&#x2F; 图片高度</span><br><span class="line">                height: height,</span><br><span class="line">                &#x2F;&#x2F; y轴滚动</span><br><span class="line">                scrollY: -scrollTop,</span><br><span class="line">                &#x2F;&#x2F; 放大2倍</span><br><span class="line">                scale: 2,</span><br><span class="line">                &#x2F;&#x2F; 关闭日志</span><br><span class="line">                logging: false,</span><br><span class="line">            &#125;).then(canvas &#x3D;&gt; &#123;</span><br><span class="line">                &#x2F;&#x2F; JSZip模块中的base64.js会对文件格式进行检测，所以我们需要将之前canvas.toDataURL()得到的data去除前缀imgData &#x3D; imgData.split(&quot;data:image&#x2F;png;base64,&quot;)[1];。</span><br><span class="line">                let imgData &#x3D; canvas.toDataURL().split(&#39;data:image&#x2F;png;base64,&#39;)[1];</span><br><span class="line">                &#x2F;&#x2F;这个images文件目录中创建一个base64数据为imgData的图像，图像名是上面获取的imaName</span><br><span class="line">                img.file(imgName + &#39;.png&#39;, imgData, &#123; base64: true &#125;);</span><br><span class="line">                that.done1 +&#x3D; 1;</span><br><span class="line">                console.log(&quot;添加图片&quot; + i);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;, 1000);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Bilibili </tag>
            
            <tag> html2canvas </tag>
            
            <tag> Front-end </tag>
            
            <tag> 前端 </tag>
            
            <tag> Vue </tag>
            
            <tag> 跨域 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bilibili评论转图片神器开发日志-解决跨域问题</title>
      <link href="Bilibili%E8%AF%84%E8%AE%BA%E8%BD%AC%E5%9B%BE%E7%89%87%E7%A5%9E%E5%99%A8%E5%BC%80%E5%8F%91%E6%97%A5%E5%BF%97-%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/"/>
      <url>Bilibili%E8%AF%84%E8%AE%BA%E8%BD%AC%E5%9B%BE%E7%89%87%E7%A5%9E%E5%99%A8%E5%BC%80%E5%8F%91%E6%97%A5%E5%BF%97-%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<blockquote><p>最近在开发<a href="tool.mightyherox.me">Bilibili评论转图片神器</a>，功能是将Bilibili视频评论区的评论转换成PNG图片。</p></blockquote><p>本来打算是做一个纯前端，通过<a href="https://github.com/SocialSisterYi/bilibili-API-collect/blob/master/comment/comment_list.md">B站API</a>（热心网友整理的API）获取数据即可。但是实际开发过程中遇到了跨域问题。</p><p>关于跨域问题的解决，网上有许多解决方案，比如jsonp。</p><p>原本以为使用jsonp后，就可以开开心心的从B站获取数据了。但悲剧又来了，B站API返回的是json格式，jsonp要求返回jsonp格式。</p><p><img src="https://i.loli.net/2020/07/11/q5i4nUbJ32RyEKd.png" alt="2020-07-11-CORB.png"></p><p>上图显示，我虽然获得了数据，但是浏览器说这个是json数据，不是jsonp数据，所以我把它拦截下来了。晕，就是说我收到了这个数据，但是浏览器把它拦在了门口不进来。</p><p>网上找到大多数解决方案是不用jsonp，而是cross。但是应用场景是自家api，修改服务端就可以了。B站又不是我家开的，改不了它的服务端呀。于是选择一个折中的办法——自己写一个后端API，用API去取数据。</p><p>之前学过一点node.js，这次就使用node.js来处理。</p><p>代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; express, http</span><br><span class="line">const express &#x3D; require(&#39;express&#39;);</span><br><span class="line">const app &#x3D; express();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; request</span><br><span class="line">const request &#x3D; require(&#39;request&#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; body parser</span><br><span class="line">const bodyParser &#x3D; require(&#39;body-parser&#39;);</span><br><span class="line">app.use(bodyParser.urlencoded(&#123; extended: false &#125;));</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; port</span><br><span class="line">const PORT &#x3D; 8089;</span><br><span class="line">app.listen(PORT);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; cross domain config</span><br><span class="line">app.all(&#39;&#x2F;api&#x2F;v1&#39;, (req, res, next) &#x3D;&gt; &#123;</span><br><span class="line">    res.header(&#39;Access-Control-Allow-Origin&#39;, &#39;*&#39;);</span><br><span class="line">    res.header(&#39;Access-Control-Allow-Headers&#39;, &#39;X-Requested-With&#39;);</span><br><span class="line">    next();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.get(&#39;&#x2F;api&#x2F;v1&#x2F;bv2av&#39;, (req, res, next) &#x3D;&gt; &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 白名單</span><br><span class="line">    if (!req.get(&#39;Origin&#39;)) return;</span><br><span class="line"></span><br><span class="line">    res.set(&#39;Access-Control-Allow-Origin&#39;, &#39;http:&#x2F;&#x2F;127.0.0.1:5500&#39;);</span><br><span class="line">    res.set(&#39;Access-Control-Allow-Methods&#39;, &#39;GET, POST&#39;);</span><br><span class="line">    res.set(&#39;Access-Control-Allow-Headers&#39;, &#39;X-Requested-With, Content-Type&#39;);</span><br><span class="line"></span><br><span class="line">    request(&#39;https:&#x2F;&#x2F;api.bilibili.com&#x2F;x&#x2F;web-interface&#x2F;view?bvid&#x3D;&#39; + req.query.bvid, function (error, response, body) &#123;</span><br><span class="line">        if (!error &amp;&amp; response.statusCode &#x3D;&#x3D; 200) &#123;</span><br><span class="line">            res.send(body)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.get(&#39;&#x2F;api&#x2F;v1&#x2F;comments&#39;, (req, res, next) &#x3D;&gt; &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 白名單</span><br><span class="line">    if (!req.get(&#39;Origin&#39;)) return;</span><br><span class="line"></span><br><span class="line">    res.set(&#39;Access-Control-Allow-Origin&#39;, &#39;http:&#x2F;&#x2F;127.0.0.1:5500&#39;);</span><br><span class="line">    res.set(&#39;Access-Control-Allow-Methods&#39;, &#39;GET, POST&#39;);</span><br><span class="line">    res.set(&#39;Access-Control-Allow-Headers&#39;, &#39;X-Requested-With, Content-Type&#39;);</span><br><span class="line">    request(&#39;https:&#x2F;&#x2F;api.bilibili.com&#x2F;x&#x2F;reply?type&#x3D;1&amp;oid&#x3D;&#39; + req.query.oid + &#39;&amp;sort&#x3D;&#39; + req.query.sort + &#39;&amp;pn&#x3D;&#39; + req.query.pn + &#39;&amp;ps&#x3D;&#39; + req.query.ps + &#39;&amp;nohot&#x3D;1&#39;, function (error, response, body) &#123;</span><br><span class="line">        if (!error &amp;&amp; response.statusCode &#x3D;&#x3D; 200) &#123;</span><br><span class="line">            res.send(body)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这样，前端只需要向我写的node.js端发起请求即可获取数据。</p><p>另外还有一个小问题，用户头像的图片无法显示出来，但是手动访问链接后再刷新又可以显示了。如下图：</p><p><img src="https://i.loli.net/2020/07/11/z9loMUiKnwCVTBR.png" alt="2020-07-11-服务器设置防盗链.png"></p><p>google一番后发现是因为服务器设置了图片防盗链的原因，解决方法很简单，在head加上一行代码即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name&#x3D;&quot;referrer&quot; content&#x3D;&quot;no-referrer&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure><p>参考：</p><p><a href="https://letswrite.tw/api-cross-domain-node/">接氣象局api、跨網域ajax資料</a></p><p><a href="https://www.ituring.com.cn/article/273795">秒建一个 json 转 jsonp 的中间层服务器</a></p><p><a href="https://www.jianshu.com/p/e1e2920dac95">JSONP跨域详解</a></p><p><a href="https://www.cnblogs.com/brusally/p/11198512.html">对B站各种数据进行抓包分析</a></p><p><a href="https://github.com/SocialSisterYi/bilibili-API-collect">bilibili-API-collect</a></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Bilibili </tag>
            
            <tag> Front-end </tag>
            
            <tag> 前端 </tag>
            
            <tag> 跨域 </tag>
            
            <tag> Nodejs </tag>
            
            <tag> 防盗链 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>观看《隐姓亿万富翁》的收获</title>
      <link href="%E9%9A%90%E5%A7%93%E4%BA%BF%E4%B8%87%E5%AF%8C%E7%BF%81/"/>
      <url>%E9%9A%90%E5%A7%93%E4%BA%BF%E4%B8%87%E5%AF%8C%E7%BF%81/</url>
      
        <content type="html"><![CDATA[<blockquote><p>最近在看一个节目《隐姓亿万富翁》，讲述的是亿万富翁Glenn Stearns只带着一百美元、一辆皮卡挑战在一个陌生城市90天内白手起家的故事。</p></blockquote><p>Glenn的创业过程大概是先解决温饱问题，招募团队，获取启动资金，寻找发展方向，火力全开。不过这些并不是线性的，很多时候是并行发生的。</p><p>Glenn这次创业其实并不是真正的“白手起家”，他作为亿万富翁，本身的经验就是他最大的财富了，所以他能看到别人看不到的点。但是，一个人的力量是有限的，一个优秀的团队是必要的。节目也是主要围绕他的团队来讲述。从他的团队中我们可以看到需要值得注意的地方。</p><p>首先是团队中的每个人都得为彼此负责。在肋排节中主厨克里斯汀多次让货物供不应求，同时筹备期间她只会打包票，不跟别人说如何执行，只是让别人信任她。出错了不去寻找自身的错误，只会找借口把责任推给别人的人。很多次出现问题了，她没有想办法去解决，只是去抱怨。在节目中也可以看到，她作为主厨，但跟其他人的联系并不是特别深厚，更多的是在单打独斗。这样的人，尽管她付出也很多，但终究还是难以担负重任，最后也是和Glenn不欢而散。</p><p>另外，如果你加入了这个团队，你就得主动为这个团队做贡献。Glenn的团队元老最后基本上都获得了2万美元的回报，除了克里斯是5千美元。克里斯这个人怎么说呢？从外表看上去，他是个普通的职员，看不到激情。事实上，他作为团队元老加入后，做的事情并不多，很多时候都看不见他的人影。他的思维应该还停留在职员思维上，等着领导安排事情，做完就算了。</p><p><strong>赚钱的本质是中间商赚差价。</strong>创业过程中，Glenn为了获取创业资本和满足温饱，多次倒卖二手车、房地产。总结一句话就是<strong>低价买入，高价卖出</strong>。要完成这个过程，就要学会掌握信息差和加工。举个例子，公司雇佣你并支付你薪水是因为你的工作只值这么多吗？肯定不是的，一定是因为你做出来的成果比支付你的薪水还要高才能继续维持这种雇佣关系。公司把你的工作成果卖出去，从中获利。那为什么大多数人不选择自己给自己打工，把中间商的环节也赚了。因为大多数人都没有那个信息差。比如说程序员，大多数程序员的交际圈比较窄，同时也不擅长与他人打交道。你让他去谈生意与让老板去谈生意结果相差很大的。另一个例子，为什么那么多字幕组或者在国外生活的留学生回国做自媒体？因为他们做给外国人看没价值啊。但是做给国人看就不一样了。大多数国人听不懂外语，对国外生活不了解。前期吸一波粉之后就可以开始割韭菜了（当然也有不少用爱发电的字幕组）。</p><p><strong>专业的事让专业的人去做。</strong>Glenn在稳定生计后立马开始组建自己的团队，寻找专业的人才。比如倒卖二手房的时候找来当地比较出名的道恩来负责翻新，期间房子发霉了还花了一笔大钱请专业公司来清理。这跟前面的中间商赚差价差不多。你不可能把全部的钱都赚了，首先你做不到，其次成本太高。比如房子发霉了自己来清理，你要去学习如何清理，你还要购买工具，甚至你最后可能清理得不干净，卖房的时候被发现直接白干了。学海无涯而生有涯，不要想着事事都能兼顾得来。</p><p>最后说说Glenn吧，他在90天挑战中始终保持着激情和主动。面对挫折，没有沉溺在痛苦中，而是很快就想办法去解决它。作为团队的领导者，他要为团队的成员安排合适的工作，并不断推动他们往前。最重要的还是行动！行动起来！用尽全力去完成！</p><p>这里是Glenn所创建的UNDERDOG BBQ<a href="https://underdogbbq.com/">官网</a>以及他们的<a href="https://underdogbbq.com/pages/about-the-underdogs">故事</a>。</p><p><img src="https://cdn.shopify.com/s/files/1/0247/1208/5564/files/81278236_10157192556783740_3923100201354526720_o.jpg?v=1577910118" alt="UNDERDOGS"></p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 创业 </tag>
            
            <tag> 团队 </tag>
            
            <tag> 励志 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>超学习-面向项目学习以及学会寻找学习资源</title>
      <link href="%E8%B6%85%E5%AD%A6%E4%B9%A0-%E9%9D%A2%E5%90%91%E9%A1%B9%E7%9B%AE%E5%AD%A6%E4%B9%A0%E4%BB%A5%E5%8F%8A%E5%AD%A6%E4%BC%9A%E5%AF%BB%E6%89%BE%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90/"/>
      <url>%E8%B6%85%E5%AD%A6%E4%B9%A0-%E9%9D%A2%E5%90%91%E9%A1%B9%E7%9B%AE%E5%AD%A6%E4%B9%A0%E4%BB%A5%E5%8F%8A%E5%AD%A6%E4%BC%9A%E5%AF%BB%E6%89%BE%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90/</url>
      
        <content type="html"><![CDATA[<h2 id="面向项目学习"><a href="#面向项目学习" class="headerlink" title="面向项目学习"></a>面向项目学习</h2><p>最近主要在给软件开发综合训练的课设写前端页面。这是一个小组项目，后端有两位大佬负责，前端由我和另一个同学负责。不过我和另一个同学对前端都不是很熟悉，第一次接触原项目的开发者使用的freemarker模板引擎。虽然不熟，但也只能硬上了。也正因为有压力在，所以很快就上手了freemarker。难点是从后端拿数据，后端同学和原作者返回数据的格式和方式不同。如果直接用后端同学的接口，那么前端很多页面都不能复用原作者的，工作量有点大。但是后端同学又不愿意改（大佬就是大佬~）。只能自己改后端了。疯狂面向搜索编程总算搞定了。也因此对后端有了进一步的认识。</p><p>这几天的学习成果，如果没有项目驱动的话，我估计要学很久，而且很有可能是从0开始学习。但是项目开发不会给你那么多时间，你只能挑着学、跳着学以便尽快上线。这种学习方式可以让你了解到真实项目开发中所需的技术，很多时候，只要你会CRUD就能搞定一个项目了。</p><h2 id="学会寻找学习资源"><a href="#学会寻找学习资源" class="headerlink" title="学会寻找学习资源"></a>学会寻找学习资源</h2><p>今天做计网实验数据包分析居然做了一天！！！比较浪费时间的地方在于验证UDP检验和。这部分知识我还没学到，但是老师有给实验参考，我就照着参考来做了。坑爹的是，老师给的参考前后数据不一致，比如前面IP数据报给的源地址、目的地址与计算检验和时用到的不一样。还有数据部分看截图不止7个字节，但是验证的时候却只计算了7个字节。因为一开始不懂，我还纠结了很久，最后决定还是google一番，果然，被参考坑了。</p><p>其实被坑的次数也不少了。比如之前学高数，教材一开始还能看得懂，后面开始云里雾里。搞得我都开始怀疑人生了。后来去B站找了个视频，忘记哪个频道了，但是别人讲的方式一下子让我明了，知道了为什么会是这样。这也让我开始养成学习新知识之前，先去寻找哪些资源比较好。讲真，国内大部分教材都很生硬，感觉就是为了让人学不下去的XD。尤其是计算机专业，很多时候你看中文教材看不懂的时候，看看英文教材就知道是怎么回事了。</p>]]></content>
      
      
      <categories>
          
          <category> 超学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 超学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>超学习-学会抽象</title>
      <link href="%E8%B6%85%E5%AD%A6%E4%B9%A0-%E5%AD%A6%E4%BC%9A%E6%8A%BD%E8%B1%A1/"/>
      <url>%E8%B6%85%E5%AD%A6%E4%B9%A0-%E5%AD%A6%E4%BC%9A%E6%8A%BD%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<p>大二有段时间在看Crash Course的<a href="https://www.bilibili.com/video/BV1EW411u7th">计算机科学速成课</a>，这系列的内容都很有趣，易于消化。印象深刻的一个细节是主持人Carrie Anne经常会让我们进入一个抽象的层面去理解新概念。</p><p><img src="https://i.loli.net/2020/05/15/VKJG2DsHoUX7hO6.png" alt="进入了另一层抽象"></p><p>什么是抽象？</p><p>抽象这个词听起来就很抽象。个人看法是把某个功能封装起来，不要考虑它内部细节，而是着重于外部展示出来的效果。打个比方就是家里每天都在使用的电饭煲，你了解它工作的时候内部是怎么运行的吗？我相信大部分人肯定都不了解，但是我们都会使用它去做出美味的饭。</p><p>学习也是一样的道理，大部分人的学习方法是从第一章开始看，一路看下去的线性的学习方法。这种方法很容易让人觉得枯燥，看着看着就看不下去了。而且很多时候我们都会遇到这么一种情况，一开始遇到某个概念难以理解，只能带着疑问往后学习。但是学到后面再回过头来看的时候就会发现原来它是那么简单。</p><p>所以在学习上我比较习惯“不求甚解”，遇到较难理解的概念，如果没必要深究下去，我会把它进行抽象。等到下次要用到这个概念的时候我只需要考虑它对外的效果即可。</p><p>总结，很多知识并不需要我们深入学习，会用就行了。用庄子的说就是“吾生也有涯，而知也无涯。以有涯随无涯，殆已！”</p><p>By the way，开头提到的<a href="https://www.bilibili.com/video/BV1EW411u7th">计算机科学速成课</a>很不错，值得一看。</p>]]></content>
      
      
      <categories>
          
          <category> 超学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 超学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>惠院学子如何申请学生邮箱</title>
      <link href="%E6%83%A0%E9%99%A2%E5%AD%A6%E5%AD%90%E5%A6%82%E4%BD%95%E7%94%B3%E8%AF%B7%E5%AD%A6%E7%94%9F%E9%82%AE%E7%AE%B1/"/>
      <url>%E6%83%A0%E9%99%A2%E5%AD%A6%E5%AD%90%E5%A6%82%E4%BD%95%E7%94%B3%E8%AF%B7%E5%AD%A6%E7%94%9F%E9%82%AE%E7%AE%B1/</url>
      
        <content type="html"><![CDATA[<p>利用学生身份我们可以享受到许多学生优惠权益，这里面有很多实用资源，详情可以看这个<a href="https://github.com/ivmm/Student-resources">链接</a></p><p>要申请学生优惠权益最常见的途径就是学生邮箱了，但是很多人不知道我们惠院的学生邮箱要怎么申请，所以接下来我将介绍如何申请惠院的学生邮箱。</p><p>首先登陆<a href="https://ehall.hzu.edu.cn/new/index.html">惠州学院网上办事大厅</a>，然后在上方搜索框搜索<strong>惠州学院学生邮箱申请</strong>：</p><p><img src="https://i.loli.net/2020/05/14/sRr5SEvzUaVyWCi.png" alt="20200514搜索学生邮箱.png"></p><p>点击<strong>惠州学院学生邮箱申请</strong>即可进入邮箱申请页面，按照要求填写即可：</p><p><img src="https://i.loli.net/2020/05/14/jhmlQCtxubgvPBD.png" alt="20200514申请表.png"></p><p>邮箱申请似乎是电脑审核的，一般过了24小时后就可以打开<a href="http://mail.stu.hzu.edu.cn/coremail/">惠院学生邮箱网址</a>，登陆你的账号（应该还要激活，这个我忘了要不要）使用啦~</p><p><img src="https://i.loli.net/2020/05/14/1tmCQRnJTwsIvVe.png" alt="20200514登录邮箱.png"></p><p>好好珍惜学生时光呀~</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 惠州学院 </tag>
            
            <tag> 学生 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于HZUCS_Course</title>
      <link href="%E5%85%B3%E4%BA%8EHZUCS-Course/"/>
      <url>%E5%85%B3%E4%BA%8EHZUCS-Course/</url>
      
        <content type="html"><![CDATA[<p>github上新开了一个仓库，主要用来分享一些课程资料、作业等学生原创内容。</p><p>缘由：<br>一、前段时间电脑坏了，虽然之前有备份部分资料到移动硬盘，但很不幸移动硬盘落在学校了。所以这学期的一些资料都丢失了，幸运地是也有部分资料被我上传到github上了（数据备份的重要性T_T）。<br>二、个人觉得，学习这件事情，虽然强调独立思考，但有人指点一下或许会走得更快更远。另，大部分人遇到问题就去百度，搜出一大堆乱七八糟的答案。这是不对的，有能力请尽量使用google。</p><p>所以在github上开了这个仓库，既可以与大家互相交流学习，也可以为师弟师妹们指点迷津。最重要的是开源精神，参与一个项目并能影响他人的成就感是很棒的！</p><p><img src="https://i.loli.net/2020/05/14/DzRbf8UT7VFhv9y.png" alt="影响我的人"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 惠州学院 </tag>
            
            <tag> github </tag>
            
            <tag> CS </tag>
            
            <tag> 开源 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回归Hexo</title>
      <link href="%E5%9B%9E%E5%BD%92Hexo/"/>
      <url>%E5%9B%9E%E5%BD%92Hexo/</url>
      
        <content type="html"><![CDATA[<h1 id="技术是为人服务的"><a href="#技术是为人服务的" class="headerlink" title="技术是为人服务的"></a>技术是为人服务的</h1><p>为什么说回归Hexo？其实早在大二就已经搭建过网站，一开始用的是WordPress，后来嫌弃太臃肿，改投Hexo的怀抱。期间写了一些小文章，也折腾了几次把Hexo部署到个人服务器上。接着学习了Vue，了解到Vuepress，又开始萌生转换到Vuepress的想法。但是自己对Vuepress并不是特别熟悉，也没有太多时间去学习，折腾了一半就不了了之了。</p><p>现在回过头来发现初衷仅仅是为了有个地方给我写写文章，文章倒没写多少，技术却学得乱七八糟。何必折腾来折腾去呢？对于Hexo，使用的时间是最长的，也是最熟悉的。所以现在要回归Hexo，先把写作坚持下来再说，就这样。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
